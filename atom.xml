<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jobscn&#39;s blog</title>
  
  <subtitle>纸上得来终觉浅，绝知此事要躬行</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jobscn.github.io/"/>
  <updated>2019-06-06T06:33:05.060Z</updated>
  <id>https://jobscn.github.io/</id>
  
  <author>
    <name>Jobscn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【数据库】索引详解</title>
    <link href="https://jobscn.github.io/dbms/database-indexing.html"/>
    <id>https://jobscn.github.io/dbms/database-indexing.html</id>
    <published>2019-02-28T15:28:41.000Z</published>
    <updated>2019-06-06T06:33:05.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h1><p>索引是为了提高数据检索速度而提前建立的相关数据结构。</p><h1 id="为什么要使用索引"><a href="#为什么要使用索引" class="headerlink" title="为什么要使用索引"></a>为什么要使用索引</h1><ol><li>索引大大减少了存储引擎需要扫描的数据量</li><li>加快排序的速度，Btree索引本身所具备的排序功能帮助数据库避免使用临时表来进行排序</li><li>索引可以使得随机I/O变为顺序I/O，分布在磁盘各处的数据，经过索引的串联形成一定顺序。</li></ol><h1 id="B树与B-树"><a href="#B树与B-树" class="headerlink" title="B树与B+树"></a>B树与B+树</h1><blockquote><p>MyISAM和Innodb通常使用BTree索引<br>认识B树之前，还需要知道<a href="https://blog.csdn.net/saasanken/article/details/80796178" target="_blank" rel="noopener">平衡二叉树</a></p></blockquote><p>主流数据库所采用的索引数据结构，基本上都是<code>b tree</code>与<code>b+ tree</code>，少数部分采用哈系桶作为索引的数据结构。因此，理解B树与B+树是相当重要的一个内容。</p><p>B+树是B树的一种变形，在了解B+树之前，先看看什么是B树。</p><h2 id="什么是B树"><a href="#什么是B树" class="headerlink" title="什么是B树"></a>什么是B树</h2><blockquote><p>建议参考: <a href="https://www.cnblogs.com/vincently/p/4526560.html" target="_blank" rel="noopener">https://www.cnblogs.com/vincently/p/4526560.html</a><br>B树是一种2-3树的扩展，B树的特征如下:</p><ul><li>根节点至少有2个子节点</li><li>满足类似平衡二叉树的特征</li></ul></blockquote><p>B树插入节点时，当节点内的关键字(索引值)超过B树的阶时，自动选取当前节点中的节点中间值，</p><p>具体数据结构:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span>  </span><br><span class="line">    <span class="keyword">int</span> keynum;             <span class="comment">/* 结点中关键码的个数，即结点的大小*/</span>  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">parent</span>;</span>    <span class="comment">/*指向双亲结点*/</span>   </span><br><span class="line">    KeyType key[m+<span class="number">1</span>];       <span class="comment">/*关键码向量，0 号单元未用*/</span>   </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">ptr</span>[<span class="title">m</span>+1];</span>  <span class="comment">/*子树指针向量*/</span>   </span><br><span class="line">    Record *recptr[m+<span class="number">1</span>];    <span class="comment">/*记录指针向量*/</span>  </span><br><span class="line">&#125;NodeType;                  <span class="comment">/*B 树结点类型*/</span></span><br></pre></td></tr></table></figure></p><p>当节点内的指针数超过阀值时，需要拆分节点<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">SplitBTNode函数</span><br><span class="line">功能：将结点p分裂成两个结点,前一半保留,后一半移入结点q</span><br><span class="line">代码实现：</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SplitBTNode</span><span class="params">(BTNode *&amp;p,BTNode *&amp;q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> s=(m+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    q=(BTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));             <span class="comment">//给结点q分配空间</span></span><br><span class="line"></span><br><span class="line">    q-&gt;ptr[<span class="number">0</span>]=p-&gt;ptr[s];                            <span class="comment">//后一半移入结点q</span></span><br><span class="line">    <span class="keyword">for</span>(i=s+<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        q-&gt;key[i-s]=p-&gt;key[i];</span><br><span class="line">        q-&gt;ptr[i-s]=p-&gt;ptr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    q-&gt;keynum=p-&gt;keynum-s;                </span><br><span class="line">    q-&gt;parent=p-&gt;parent;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=p-&gt;keynum-s;i++)                         <span class="comment">//修改双亲指针 </span></span><br><span class="line">        <span class="keyword">if</span>(q-&gt;ptr[i]!=<span class="literal">NULL</span>) </span><br><span class="line">            q-&gt;ptr[i]-&gt;parent=q;</span><br><span class="line">    p-&gt;keynum=s<span class="number">-1</span>;                              <span class="comment">//结点p的前一半保留,修改结点p的keynum</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="什么是B-树"><a href="#什么是B-树" class="headerlink" title="什么是B+树"></a>什么是B+树</h2><p>相比于B树，B+树的区别在于，有多少个关键字就有多少个叶子节点，而其他节点只用作索引，并不保存数据。</p><p>需要知道的是，B树所有叶节点处在同一层上。同时，所有叶节点都使用了指针进行相互连接。</p><h1 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h1><p>memory存储引擎通常使用哈希索引</p><p>基于哈希表实现，只有查询条件精确匹配哈希表中的所有列，才能使用到哈希索引。</p><p>对于hash索引中的所有列，存储引擎会为每一行计算一个hash码，hash索引中存储的就是hash码，因此只能满足全值匹配。</p><h1 id="数据库中的索引"><a href="#数据库中的索引" class="headerlink" title="数据库中的索引"></a>数据库中的索引</h1><h2 id="聚集索引"><a href="#聚集索引" class="headerlink" title="聚集索引"></a>聚集索引</h2><p>在建表时，如果不为表设置主键，那么数据就无序的按行存放于磁盘中。如果为表设置一个主键，则数据从整齐排列的结构转化为树状结构，也就是B+Tree结构。因此一个表只能有一个聚集索引，因为它决定了这张表的物理存储顺序。</p><h2 id="非聚集索引"><a href="#非聚集索引" class="headerlink" title="非聚集索引"></a>非聚集索引</h2><p>非聚集索引同聚集索引一样的采用平衡树作为主要数据结构，如果为多个字段添加索引，则会出现多个相互独立的索引结构。</p><p><strong><em>通过非聚集索引，并不直接得到真实数据，而只是查到相应记录对应的主键值，最终再使用聚集索引检索到真实的数据</em></strong>，聚集索引是获取真实数据的唯一路径。</p><h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><blockquote><p>memory引擎不支持覆盖引擎</p></blockquote><p>对于以上所说的索引方式存在一种例外，是不需要再经过聚集索引，而直接可以获得数据一种索引方式，称之为<code>覆盖索引</code>，又或者是我们常说的<code>复合索引</code>或<code>多字段索引</code>。</p><p>覆盖索引直接将对应字段的值拷贝到索引当中。仅此，只需要检索索引，到达该索引的叶节点，即可获取到相应数据值。</p><p>例如下面这样的一个语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//建立索引</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> index_birthday <span class="keyword">on</span> user_info(birthday);</span><br><span class="line"></span><br><span class="line">//查询生日在1991年11月1日出生用户的用户名</span><br><span class="line"><span class="keyword">select</span> user_name <span class="keyword">from</span> user_info</span><br><span class="line"><span class="keyword">where</span> birthday = <span class="string">'1991-11-1'</span></span><br></pre></td></tr></table></figure></p><p>这里为<code>user_info</code>表的<code>birthday</code>字段建立了<code>index_birthday</code>索引。因此，在查询<code>birthday</code>字段时，<strong><em>会先通过非聚集索引，得到对应查询结果的主键ID，并通过主键ID再执行聚集索引，查询到真实数据</em></strong></p><p>而如果我们将这个索引，修改为复合索引(覆盖索引)，那么情形就会有所改变，下面来看。</p><h3 id="复合索引-多字段索引"><a href="#复合索引-多字段索引" class="headerlink" title="复合索引(多字段索引)"></a>复合索引(多字段索引)</h3><p>一个简单的创建复合索引的sql语句:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> index_birthday_and_user_name</span><br><span class="line"><span class="keyword">on</span> user_info(birthday, user_name);</span><br></pre></td></tr></table></figure></p><p>这时，再执行对应的查询操作时，非聚集索引的叶节点<strong><em>不仅包含了主键ID，还包含user_name的值</em></strong>，如果只是获取<code>user_name</code>的值(比如上面<code>select</code>语句)，就不需要再去执行聚集索引操作。</p><h3 id="INCLUDE索引"><a href="#INCLUDE索引" class="headerlink" title="INCLUDE索引"></a>INCLUDE索引</h3><p>在创建索引时，增加一个INCLUDE项，就可以做到在不增加索引键大小的情况下，仅使用一个非聚集索引就完成数据的检索。</p><p>比如我们将上面的创建索引语句修改为<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//建立索引</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> index_birthday <span class="keyword">on</span> user_info(birthday)</span><br><span class="line"><span class="keyword">INCLUDE</span> (user_name);</span><br></pre></td></tr></table></figure></p><p>这样的效果是，只能通过<code>birthday</code>进行索引，因此索引键的大小并没有变化，但索引的叶节点内却包含了<code>user_name</code>字段的值。</p><p>若将WHERE条件修改为<code>user_name</code>，则将不会通过<code>index_birthday</code>索引进行查询，而是采用聚集索引(全表查询)的方式进行搜索。</p><h2 id="使用B树的索引的检索方式"><a href="#使用B树的索引的检索方式" class="headerlink" title="使用B树的索引的检索方式"></a>使用B树的索引的检索方式</h2><p>对于普通索引或复合索引，采用了B+树形式存储键值，数据库是如何使用这些键值的？</p><h3 id="全值匹配"><a href="#全值匹配" class="headerlink" title="全值匹配"></a>全值匹配</h3><p>全值匹配也就是要求键值完全匹配的一种查询，比如这样的查询语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> order_name <span class="keyword">from</span> t_order <span class="keyword">where</span> order_id=<span class="string">'123456'</span></span><br></pre></td></tr></table></figure></p><h3 id="最左前缀匹配"><a href="#最左前缀匹配" class="headerlink" title="最左前缀匹配"></a>最左前缀匹配</h3><p>最左前缀匹配意味着当有两个以上索引时，将索引列的顺序逐个匹配关键字。</p><p>比如设置了两个联合索引<code>order_id</code>与<code>order_data</code>，那么以下的查询语句是可以使用索引的<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> order_name <span class="keyword">from</span> t_order <span class="keyword">where</span> order_id=<span class="string">'123456'</span></span><br></pre></td></tr></table></figure></p><p>即使顺序颠倒也依然成立<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> order_name <span class="keyword">from</span> t_order <span class="keyword">where</span> order_id=<span class="string">'123456'</span> <span class="keyword">AND</span> order_data=<span class="string">'CA00013'</span></span><br></pre></td></tr></table></figure></p><p>但查询条件中的列缺少前序索引列时，那么这个联合索引将不被使用。例如<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> order_name <span class="keyword">from</span> t_order <span class="keyword">where</span> order_data=<span class="string">'CA00013'</span></span><br></pre></td></tr></table></figure></p><p>最左匹配有两个重要原则</p><ol><li><code>=</code>和<code>in</code>可以乱序，mysql的查询优化器会自动将其优化为满足索引可识别的形式。</li><li>从左到右当遇到范围查询(<code>&gt;</code>,<code>&lt;</code>,<code>between</code>,<code>like</code>)时，最左前缀就会停止匹配。例如，建立索引(a,b,c,d)，查询语句 a=1 and b=2 and c&gt;3 and d=4，那么索引的有效列就只是a,b,c三个列，d不会被匹配进去。如果更换索引顺序为(a,b,d,c)那么这条语句的所有列都能应用索引。</li></ol><h3 id="列前缀匹配"><a href="#列前缀匹配" class="headerlink" title="列前缀匹配"></a>列前缀匹配</h3><p>匹配某一列的开头部分，例如<code>order_data=&#39;CA00%&#39;</code></p><h3 id="范围值匹配"><a href="#范围值匹配" class="headerlink" title="范围值匹配"></a>范围值匹配</h3><p>B树同样的适合于范围值的查找，例如<br><br><code>order_id &gt; &#39;123&#39; and order_id &lt; &#39;456&#39;</code></p><h3 id="精确匹配左前列，范围匹配另一列"><a href="#精确匹配左前列，范围匹配另一列" class="headerlink" title="精确匹配左前列，范围匹配另一列"></a>精确匹配左前列，范围匹配另一列</h3><p>在上面提到过，是最左匹配两个重要原则的第二个</p><p>例如 <code>a=1 and b=2 and c &gt; 3 and c&lt;6</code></p><h3 id="只访问索引的查询"><a href="#只访问索引的查询" class="headerlink" title="只访问索引的查询"></a>只访问索引的查询</h3><p>只需要访问非聚集索引而不需要访问聚集索引的查询(也就是覆盖索引)</p><h2 id="索引交叉"><a href="#索引交叉" class="headerlink" title="索引交叉"></a>索引交叉</h2><p>当一个查询语句中，用到多个索引时，数据库检索会做索引的交叉处理。</p><p>例如当一个查询的检索条件用到2个非聚集索引，而结果需要展示更多的字段时，数据库将这样处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">索引1-\</span><br><span class="line">       -&gt;哈希匹配最小子集-&gt;聚集索引-&gt;数据</span><br><span class="line">索引2-/</span><br></pre></td></tr></table></figure></p><p>如果这2个非聚集索引包含了所需要展示的所有字段(通过<code>INCLUDE</code>或复合索引等方式)，则数据库检索方式将变为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">索引1-\</span><br><span class="line">       -&gt;哈希匹配最小子集-&gt;数据</span><br><span class="line">索引2-/</span><br></pre></td></tr></table></figure></p><h2 id="BTree索引的限制"><a href="#BTree索引的限制" class="headerlink" title="BTree索引的限制"></a>BTree索引的限制</h2><p>与前文中最左前缀匹配中的给出的两条原则相似，这里给出一个总结。</p><ol><li>如果不是按照索引的最左列开始查询，则无法使用索引。(mysql会自动优化条件中的列顺序)</li><li>不可以跳过索引顺序左边的索引列</li><li><code>NOT IN</code>和<code>&lt;</code>、<code>&gt;</code>操作无法使用索引</li><li>查询中有某个列的范围查询，则右边的所有列都不使用索引。</li></ol><h2 id="哈希索引的限制"><a href="#哈希索引的限制" class="headerlink" title="哈希索引的限制"></a>哈希索引的限制</h2><p>前面哈希索引一节，提到了哈希索引只能满足<code>全值匹配</code>一种查询操作，我们来看看哈希索引存在哪些限制。</p><ol><li>哈希索引需要2次查询。哈希索引仅保存了哈希码、行指针等。需要先找到行，对行进行读取。</li><li>不可用于排序。由于哈希索引按哈希码排序，并不是按照键值顺序，因此是无法实现排序的。</li><li>仅支持全值匹配查找，不支持范围查找、模糊查找</li><li>存在哈希冲突。不适用于类似性别(男、女)这样的选择性差的列，因为计算出的哈希码基本相同。</li></ol><h1 id="MyISAM与InnoDB中的B-树"><a href="#MyISAM与InnoDB中的B-树" class="headerlink" title="MyISAM与InnoDB中的B+树"></a>MyISAM与InnoDB中的B+树</h1><blockquote><p><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p></blockquote><h2 id="MyISAM中的索引"><a href="#MyISAM中的索引" class="headerlink" title="MyISAM中的索引"></a>MyISAM中的索引</h2><p>对于MyISAM的主键索引而言，叶节点存放数据记录的实际地址，属于一种”非聚集”索引。</p><h2 id="InnoDB中的索引"><a href="#InnoDB中的索引" class="headerlink" title="InnoDB中的索引"></a>InnoDB中的索引</h2><p>InnoDB的索引则与MyISAM不同，有聚集索引的概念，这意味着，主键索引本身就是一个数据，叶节点直接存放真实数据。因为聚集索引与物理实际存放的顺序相同。因此，InnoDB表数据文件就是一颗B+树。</p><p>因此，<strong>InnoDB中要求表一定要有聚集索引</strong>，MyISAM不对此做要求。</p><p>对于Mysql的InnoDb引擎而言，<strong>主键默认成为聚集索引</strong>，如果不设主键，则非空的列成为聚集索引，否则生成隐藏列作为聚集索引，<strong>用户不能自己创建聚集索引，例如其他高级数据库中的<code>CREATE CLUSTERED INDEX</code>语句</strong></p><blockquote><p>InnoDB建议选择自增列作为主键，以便于聚集索引的建立，不建议使用UUID作为主键。</p></blockquote><blockquote><p>MyISAM按插入顺序在磁盘上存放数据，行尺寸固定，只需要跳过所需字节来定位目标行。</p></blockquote><h1 id="Mysql中的索引"><a href="#Mysql中的索引" class="headerlink" title="Mysql中的索引"></a>Mysql中的索引</h1><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p>一个简单的创建索引语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [NONCLUSTERED|CLUSTERED] <span class="keyword">INDEX</span> index_name </span><br><span class="line"><span class="keyword">ON</span> table_name(field_name)</span><br></pre></td></tr></table></figure></p><p>其中，如果未指定是否是聚集索引，则默认为<code>NONCLUSTERED</code></p><h2 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h2><h2 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h2><h1 id="索引的优化"><a href="#索引的优化" class="headerlink" title="索引的优化"></a>索引的优化</h1><blockquote><p>对于索引的优化，需要会用explain，明白extra字段的含义<br><br>using where: 使用索引但需要回表<br><br>using index: 覆盖索引<br><br>using index condition: 包含索引与未索引列时，先处理索引列，再回表查询。<br><br>using where; Using index: 不需要回表查询，查询所需的内容在索引中完成。</p></blockquote><h2 id="不可使用表达式或函数"><a href="#不可使用表达式或函数" class="headerlink" title="不可使用表达式或函数"></a>不可使用表达式或函数</h2><p>例如:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ... <span class="keyword">from</span> product</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line"><span class="keyword">to_days</span>(out_date) - <span class="keyword">to_days</span>(<span class="keyword">current_date</span>) &lt;=<span class="number">30</span></span><br></pre></td></tr></table></figure></p><p>其中<code>out_date</code>是索引列，对其使用函数将无法使用到索引。应该这样修改：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ... <span class="keyword">from</span> product</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">out_date &lt;= <span class="keyword">date_add</span>(<span class="keyword">current_date</span>, <span class="built_in">interval</span> <span class="number">30</span> <span class="keyword">day</span>)</span><br></pre></td></tr></table></figure></p><h2 id="对前缀建立索引或缩短键值"><a href="#对前缀建立索引或缩短键值" class="headerlink" title="对前缀建立索引或缩短键值"></a>对前缀建立索引或缩短键值</h2><p>缩短键值对索引查找所付出的I/O效率的提升是有一定效果的，并且Mysql中的索引，对键值大小有所限制<code>innodb</code>引擎中的键值大小不可以超过767字节，<code>MyISAM</code>不可以超过1000个字节。</p><p>对于常见的基本数据类型，一般不会超过这些限制，但如果超过，我们依然有方案可用，那就是对前缀建立索引:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> <span class="keyword">table</span>(col_name(n))</span><br></pre></td></tr></table></figure></p><p>mysql中可以这样去对某一列前n个字符的建立索引。</p><p>需要注意的是，对前缀建立索引，会降低索引列的选择性。</p><h2 id="使用联合索引并且选择好顺序"><a href="#使用联合索引并且选择好顺序" class="headerlink" title="使用联合索引并且选择好顺序"></a>使用联合索引并且选择好顺序</h2><p>如果对每一个列建立索引，显然不仅索引繁多，索引的开销以及查询结果多个索引的合并的开销，都是相当大的，选择联合索引也是一种比较好的解决方案。</p><p>但倘若建立联合索引，则需要更多注意建立索引时索引列顺序的选择</p><ol><li>经常被使用到的列顺序优先</li><li>选择性高的列优先(如果对应列是性别、状态这种重复性很强，选择性很低的列，一般没有必要建立索引)</li><li>宽度小的列优先(索引的键值越小，I/O效率越高)</li><li>所需字段不多时，可以使用覆盖索引(包含了一次查询所需要的所有字段的索引)。可以优化缓存，减少缓存换入换出，减少了磁盘I/O操作；减少随机I/O，变随机I/O为顺序I/O；避免InnoDB对聚集索引的查询。；避免MyISAM进行系统调用(MyISAM表数据依赖操作系统来缓存)</li></ol><h2 id="索引列中不要包含NULL值"><a href="#索引列中不要包含NULL值" class="headerlink" title="索引列中不要包含NULL值"></a>索引列中不要包含NULL值</h2><p>只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。</p><h2 id="数据库自带的一种覆盖索引"><a href="#数据库自带的一种覆盖索引" class="headerlink" title="数据库自带的一种覆盖索引"></a>数据库自带的一种覆盖索引</h2><p>在sakila数据库中对索引列<code>last_name</code>执行以下语句时<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> actor_id, last_name <span class="keyword">from</span> actor <span class="keyword">where</span> last_name=<span class="string">'1'</span>;</span><br></pre></td></tr></table></figure></p><p>可以看到Extra一栏写着<code>Using Index</code>，这是因为索引列<code>last_name</code>已经包含了该表的主键<code>actor_id</code>的值，也可以称之为是一种覆盖索引。</p><h2 id="使用索引优化排序"><a href="#使用索引优化排序" class="headerlink" title="使用索引优化排序"></a>使用索引优化排序</h2><p>需要的条件:</p><ol><li>索引的列顺序和order by子句的顺序完全一致</li><li>索引中所有列的升序或降序和order by顺序完全一致</li><li>order by中的字段全部在关联表中的第一张表中</li></ol><p>可在索引内完成的排序例如<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> rental_date <span class="keyword">from</span> rental <span class="keyword">where</span> rental_date = <span class="string">'2010-05-09'</span>  <span class="keyword">order</span> <span class="keyword">by</span> inventory_id;</span><br></pre></td></tr></table></figure></p><p>或<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> rental_date <span class="keyword">from</span> rental <span class="keyword">where</span> rental_date = <span class="string">'2010-05-09'</span>  <span class="keyword">order</span> <span class="keyword">by</span> inventory_id, customer_id;</span><br></pre></td></tr></table></figure></p><p>如果顺序不一致，则会出现using filesort，比如<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> rental_date <span class="keyword">from</span> rental <span class="keyword">where</span> rental_date = <span class="string">'2010-05-09'</span>  <span class="keyword">order</span> <span class="keyword">by</span> inventory_id <span class="keyword">desc</span>, customer_id;</span><br></pre></td></tr></table></figure></p><p>但一定要注意不能使用范围查询，否则范围符号右边出现的索引将失效<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> rental_date <span class="keyword">from</span> rental <span class="keyword">where</span> rental_date &gt; <span class="string">'2010-05-09'</span>  <span class="keyword">order</span> <span class="keyword">by</span> inventory_id;</span><br></pre></td></tr></table></figure></p><h2 id="模拟hash索引"><a href="#模拟hash索引" class="headerlink" title="模拟hash索引"></a>模拟hash索引</h2><p>通过额外一列，单独对行做hash并对该列建立索引来实现模拟hash的功能。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">table</span> <span class="keyword">set</span> column_hash = <span class="keyword">md5</span>(<span class="keyword">column</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_name <span class="keyword">on</span> <span class="keyword">table</span>(column_hash);</span><br></pre></td></tr></table></figure></p><p>hash索引需要注意的是</p><ol><li>只能处理键值全值匹配</li><li>hash函数决定索引键的大小</li><li>需要小心hash冲突</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">column</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> column_hash = <span class="keyword">md5</span>(<span class="string">"xxxx"</span>) <span class="keyword">and</span> <span class="keyword">column</span>=<span class="string">"xxx"</span>;</span><br></pre></td></tr></table></figure><p>之所以还需要使用<code>and column=&quot;xxx&quot;</code>是为了避免hash冲突的出现，这使得整个查询在哈希索引的作用下，再对结果进行一次冲突避免。</p><h2 id="使用索引优化锁"><a href="#使用索引优化锁" class="headerlink" title="使用索引优化锁"></a>使用索引优化锁</h2><ol><li>使用索引可以减少处理行，减少了加锁的行数</li><li>使用索引可以减少处理行并在内存中处理，因此加快处理速度，加快锁是释放。</li></ol><p>两个事务并发的对查询加排它锁时，如果查询的对应字段加了索引，排他锁是行级的，如果没有索引，那么排他锁将锁住整个表，使得第二个查询无法执行。</p><h2 id="删除重复和冗余的索引"><a href="#删除重复和冗余的索引" class="headerlink" title="删除重复和冗余的索引"></a>删除重复和冗余的索引</h2><blockquote><p>unique key(id) 并不只是约束，同时也会建立唯一索引。</p></blockquote><ol><li><p>重复索引<br><br>例如，对某一字段这样定义<code>primary key(id), unique key(id), index(id)</code>，那么这里就出现了三个索引，主键索引、唯一索引、单列索引，是重复的，对维护的开销比较大。</p></li><li><p>冗余索引<br><br> 1) 例如，<code>index(a), index(a,b)</code>属于冗余索引，对b树机制缺乏了解，其实<code>index(a)</code>包含在<code>index(a,b)</code>这一联合索引中，因此没有必要建立<code>index(a)</code>索引<br><br> 2) 如果建立这样的索引<code>primary key(id), index(a,id)</code>，意味着使用者缺乏对innodb存储引擎建立索引的了解，每一个二级索引，会自动的拷贝主键索引信息的。</p></li></ol><p>使用<code>pt-duplicate-key-checker h=127.0.0.1</code>命令可以检查冗余和重复的索引</p><h2 id="更新索引统计信息及减少索引碎片"><a href="#更新索引统计信息及减少索引碎片" class="headerlink" title="更新索引统计信息及减少索引碎片"></a>更新索引统计信息及减少索引碎片</h2><p>需要定期的维护索引的碎片<br><br><code>analyze table table_name</code><br><br><code>optimize table table_name</code>(会锁表，需要注意使用时间)</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ol><li>为表上的所有字段建立索引，这种做法是否可行？<br><br> 1) 不可行，插入、更新等操作所需要的维护索引的开销会变得很大。因此对于经常需要更新和插入的表格就没有必要为不常用的where语句去建立索引、对于较小的表也可以不用建立索引。(注: innodb引入了插入缓存，使得多次插入不会引起多次的索引维护)<br> 2) 太多索引也会影响查询时间，会增加查询优化器对查询语句分析的时间。</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/kissdodog/p/3158701.html" target="_blank" rel="noopener">https://www.cnblogs.com/kissdodog/p/3158701.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是索引&quot;&gt;&lt;a href=&quot;#什么是索引&quot; class=&quot;headerlink&quot; title=&quot;什么是索引&quot;&gt;&lt;/a&gt;什么是索引&lt;/h1&gt;&lt;p&gt;索引是为了提高数据检索速度而提前建立的相关数据结构。&lt;/p&gt;
&lt;h1 id=&quot;为什么要使用索引&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="dbms" scheme="https://jobscn.github.io/categories/dbms/"/>
    
    
      <category term="数据库" scheme="https://jobscn.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="mysql" scheme="https://jobscn.github.io/tags/mysql/"/>
    
      <category term="数据结构" scheme="https://jobscn.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>【HTTP】使用telnet进行HTTP实验</title>
    <link href="https://jobscn.github.io/network/http/http-test-telnet.html"/>
    <id>https://jobscn.github.io/network/http/http-test-telnet.html</id>
    <published>2019-01-24T05:57:00.000Z</published>
    <updated>2019-07-08T02:37:23.246Z</updated>
    
    <content type="html"><![CDATA[<p>telnet是建立TCP连接的一种手段，我们可以用来测试HTTP报文。</p><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><blockquote><p>telnet <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 80</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: baidu.com</span><br></pre></td></tr></table></figure><p>即可收到报文响应</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HTML ...--&gt;</span><br></pre></td></tr></table></figure><h2 id="尝试对报文使用内容编码"><a href="#尝试对报文使用内容编码" class="headerlink" title="尝试对报文使用内容编码"></a>尝试对报文使用内容编码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: baidu.com</span><br><span class="line">Accept-Encoding: gzip</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Bdpagetype: 1</span><br><span class="line">Bdqid: 0xd80316f4000ab7de</span><br><span class="line">Cache-Control: private</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">...省略若干字段</span><br><span class="line"></span><br><span class="line">...省略被编码的主体</span><br></pre></td></tr></table></figure><p>可以看到，主体已经成功的进行了内容编码，响应报文中指定为gzip，并且采用了分块传输编码chunked。</p><blockquote><p>经过尝试的同学应该发现，telnet在得到响应后，并没有断开连接，依然在等待输入状态，这时候若直接敲击2下回车，会得到<code>400 bad request</code>响应。这时因为，HTTP/1.1默认使用了长连接(Connection: keep-alive)，因此在一个请求结束时，并不会断开TCP连接，并且继续等待下一个请求的到来，直到得到<code>Connection: close</code>或心跳失败后断开连接。</p></blockquote><h2 id="单独进行chunked的效果"><a href="#单独进行chunked的效果" class="headerlink" title="单独进行chunked的效果"></a>单独进行chunked的效果</h2><p>通常，采用内容编码后，会结合chunked进行再分块，因此在这里无法单独对百度页面测试chunked编码。</p><p>chunked常使用在动态页面解析技术驱动的页面下，因为动态解析的页面往往无法确定最终的长度。</p><p>由于支持HTTP/1.1的接收方，一定支持chunked编码，不需要特意指定Te: chunked</p><p>可以尝试GET以下资源</p><blockquote><p><a href="http://www.httpwatch.com/httpgallery/chunked/chunkedimage.aspx" target="_blank" rel="noopener">http://www.httpwatch.com/httpgallery/chunked/chunkedimage.aspx</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /httpgallery/chunked/chunkedimage.aspx HTTP/1.1</span><br><span class="line">Host: www.httpwatch.com</span><br></pre></td></tr></table></figure><p>该资源使用chunked传输编码，收到的报文主体类似<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">400</span><br><span class="line">xxxxx...(400字节)</span><br><span class="line">30</span><br><span class="line">xxxx...(30字节)</span><br><span class="line">0(结束)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;telnet是建立TCP连接的一种手段，我们可以用来测试HTTP报文。&lt;/p&gt;
&lt;h2 id=&quot;简单示例&quot;&gt;&lt;a href=&quot;#简单示例&quot; class=&quot;headerlink&quot; title=&quot;简单示例&quot;&gt;&lt;/a&gt;简单示例&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;telnet
      
    
    </summary>
    
      <category term="network" scheme="https://jobscn.github.io/categories/network/"/>
    
      <category term="http" scheme="https://jobscn.github.io/categories/network/http/"/>
    
    
      <category term="HTTP" scheme="https://jobscn.github.io/tags/HTTP/"/>
    
      <category term="telnet" scheme="https://jobscn.github.io/tags/telnet/"/>
    
      <category term="chunked" scheme="https://jobscn.github.io/tags/chunked/"/>
    
  </entry>
  
  <entry>
    <title>【HTTP】实体首部字段</title>
    <link href="https://jobscn.github.io/network/http/header/http-head-body.html"/>
    <id>https://jobscn.github.io/network/http/header/http-head-body.html</id>
    <published>2019-01-24T05:54:00.000Z</published>
    <updated>2019-07-08T02:45:41.891Z</updated>
    
    <content type="html"><![CDATA[<p>实体部分所使用的首部字段，用于补充内容的更新时间或实体相关信息等。</p><h1 id="1-Allow"><a href="#1-Allow" class="headerlink" title="1.Allow"></a>1.Allow</h1><p>用于通知客户端能够支持的Request-URI指定资源的所有HTTP方法。</p><p>当收到不支持的HTTP方法时，会返回405 Method Not Allowed作为响应，并把所有能支持的HTTP方法写入首部字段Allow后返回。</p><h1 id="2-Content-Encoding"><a href="#2-Content-Encoding" class="headerlink" title="2.Content-Encoding"></a>2.Content-Encoding</h1><p>会告知客户端，服务器选用的主体的内容编码方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Encoding: gzip</span><br></pre></td></tr></table></figure></p><h1 id="3-Content-Length"><a href="#3-Content-Length" class="headerlink" title="3.Content-Length"></a>3.Content-Length</h1><p>表明实体部分的大小，<strong><em>对实体主体进行内容编码传输时，不能再使用该字段！(Transfer-Encoding)</em></strong></p><blockquote><p>Content-Encoding: gzip 输出时，先把整个压缩后的数据写到一个很大的字节数组里(如 ByteArrayOutputStream)，然后得到数组大小 -&gt; Content-Length。</p></blockquote><blockquote><p>如果结合Transfer-Encoding: chunked使用，就不必申请一个很大的字节数组了，可以一块一块的输出，更科学，占用资源更少。</p></blockquote><h1 id="4-Content-Location"><a href="#4-Content-Location" class="headerlink" title="4.Content-Location"></a>4.Content-Location</h1><p>给出报文主体部分对应的URI，和首部字段Location不同，Content-Location表示的是报文主体返回资源对应的URI。</p><p>比如，对于使用Accept-Language驱动的请求，当返回页面内容与实际请求的对象不同时，首部字段会写明URI。(访问<a href="http://www.baidu.com/" target="_blank" rel="noopener">http://www.baidu.com/</a>返回的对象确实<a href="http://www.baidu.com/index-cn.html" target="_blank" rel="noopener">http://www.baidu.com/index-cn.html</a>)</p><h1 id="5-Content-MD5"><a href="#5-Content-MD5" class="headerlink" title="5.Content-MD5"></a>5.Content-MD5</h1><p>报文主体-&gt;MD5-&gt;Base64</p><p>客户端会对接收的报文执行相同的MD5算法，然后与首部字段Content-MD5的字段值做比较。</p><p>一般用于检验传输过程主体是否保持完整。</p><p>若内容被恶意篡改，且Content-MD5也被重新计算而后篡改，那么其实无从得知报文是否被人恶意篡改过。</p><h1 id="6-Content-Range"><a href="#6-Content-Range" class="headerlink" title="6.Content-Range"></a>6.Content-Range</h1><p>针对范围请求，响应一个范围响应，并将报文主体对应的范围写入该字段内。</p><h1 id="7-Content-Type"><a href="#7-Content-Type" class="headerlink" title="7.Content-Type"></a>7.Content-Type</h1><p>用于指定实体内容的媒体类型，与Accept一样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: text/html; charset=UTF-8</span><br></pre></td></tr></table></figure></p><p>参数charset表示字符集。</p><h1 id="8-Expires"><a href="#8-Expires" class="headerlink" title="8.Expires"></a>8.Expires</h1><p>告知客户端资源失效的日期，缓存服务器收到该响应后，会以缓存来应答请求，并在指定日期前保存响应的副本。超过指定时间后，会转为向源服务器请求资源。</p><p>源服务器不希望缓存服务器对资源缓存时，最好在Expires内写入与Date相同的时间值。</p><p>比起Expires，会更优先处理Cache-Control的max-age指令。</p><h1 id="9-Last-Modified"><a href="#9-Last-Modified" class="headerlink" title="9.Last-Modified"></a>9.Last-Modified</h1><p>该资源最终修改时间，若使用CGI脚本进行动态数据处理，该值可能变成数据最终修改时的时间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实体部分所使用的首部字段，用于补充内容的更新时间或实体相关信息等。&lt;/p&gt;
&lt;h1 id=&quot;1-Allow&quot;&gt;&lt;a href=&quot;#1-Allow&quot; class=&quot;headerlink&quot; title=&quot;1.Allow&quot;&gt;&lt;/a&gt;1.Allow&lt;/h1&gt;&lt;p&gt;用于通知客户端能够
      
    
    </summary>
    
      <category term="network" scheme="https://jobscn.github.io/categories/network/"/>
    
      <category term="http" scheme="https://jobscn.github.io/categories/network/http/"/>
    
      <category term="header" scheme="https://jobscn.github.io/categories/network/http/header/"/>
    
    
      <category term="HTTP" scheme="https://jobscn.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>【HTTP】关于首部字段Connection</title>
    <link href="https://jobscn.github.io/network/http/http-head-connection.html"/>
    <id>https://jobscn.github.io/network/http/http-head-connection.html</id>
    <published>2019-01-24T05:54:00.000Z</published>
    <updated>2019-07-08T02:51:27.230Z</updated>
    
    <content type="html"><![CDATA[<p>Connection字段属于通用首部字段，即请求与响应均可持有的字段。</p><h1 id="Connection字段的作用"><a href="#Connection字段的作用" class="headerlink" title="Connection字段的作用"></a>Connection字段的作用</h1><ol><li>控制不再转发给代理的首部字段</li><li>管理持久连接</li></ol><h1 id="控制不再转发的首部字段"><a href="#控制不再转发的首部字段" class="headerlink" title="控制不再转发的首部字段"></a>控制不再转发的首部字段</h1><p>假设有这样一条数据转发流<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">客户端 -&gt; 代理服务器 -&gt; 源服务器</span><br></pre></td></tr></table></figure></p><p>报文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Upgrade: HTTP/1.1</span><br><span class="line">Connection: Upgrade</span><br></pre></td></tr></table></figure></p><p>到达代理服务器后，Upgrade会被删除，并且报文变为再转发出去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br></pre></td></tr></table></figure></p><p>传输到源服务器</p><h1 id="管理持久连接"><a href="#管理持久连接" class="headerlink" title="管理持久连接"></a>管理持久连接</h1><p>关闭连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection: close</span><br></pre></td></tr></table></figure></p><p>启用持久连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Keep-Alive: timeout=10, max=500</span><br><span class="line">Connection: Keep-Alive</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Connection字段属于通用首部字段，即请求与响应均可持有的字段。&lt;/p&gt;
&lt;h1 id=&quot;Connection字段的作用&quot;&gt;&lt;a href=&quot;#Connection字段的作用&quot; class=&quot;headerlink&quot; title=&quot;Connection字段的作用&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="network" scheme="https://jobscn.github.io/categories/network/"/>
    
      <category term="http" scheme="https://jobscn.github.io/categories/network/http/"/>
    
    
      <category term="HTTP" scheme="https://jobscn.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>【HTTP】Cookie首部字段</title>
    <link href="https://jobscn.github.io/network/http/header/http-head-cookie.html"/>
    <id>https://jobscn.github.io/network/http/header/http-head-cookie.html</id>
    <published>2019-01-24T05:54:00.000Z</published>
    <updated>2019-07-08T02:47:16.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Set-Cookie-响应首部"><a href="#Set-Cookie-响应首部" class="headerlink" title="Set-Cookie(响应首部)"></a>Set-Cookie(响应首部)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: status=enable; expires=Tue, 05 Jul 2011 07:26:31</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>访问</th></tr></thead><tbody><tr><td>NAME=VALUE</td><td>赋予Cookie的名字和值（必需项）</td></tr><tr><td>expires=DATE</td><td>有效期，默认为关闭浏览器前</td></tr><tr><td>path=PATH</td><td>将服务器上的文件目录作为cookie的使用对象，默认为文档所在目录</td></tr><tr><td>domain=域名</td><td>Cookie使用的域名，默认为创建cookie的服务器域名</td></tr><tr><td>Secure</td><td>仅在HTTPS通信时才会发送Cookie</td></tr><tr><td>HttpOnlly</td><td>使得Cookie不能被JS脚本访问</td></tr></tbody></table><h1 id="Cookie-请求首部"><a href="#Cookie-请求首部" class="headerlink" title="Cookie(请求首部)"></a>Cookie(请求首部)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: status=enable</span><br></pre></td></tr></table></figure><p>首部字段Cookie告知服务器，当客户端向获得HTTP状态管理支持时，会在请求中包含从服务器接收到的单个或多个Cookie，</p><h1 id="其他字段"><a href="#其他字段" class="headerlink" title="其他字段"></a>其他字段</h1><p>由于HTTP是可扩展的，因此有一些常用的非标准首部字段。见《图解HTTP》6.8, p132</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Set-Cookie-响应首部&quot;&gt;&lt;a href=&quot;#Set-Cookie-响应首部&quot; class=&quot;headerlink&quot; title=&quot;Set-Cookie(响应首部)&quot;&gt;&lt;/a&gt;Set-Cookie(响应首部)&lt;/h1&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="network" scheme="https://jobscn.github.io/categories/network/"/>
    
      <category term="http" scheme="https://jobscn.github.io/categories/network/http/"/>
    
      <category term="header" scheme="https://jobscn.github.io/categories/network/http/header/"/>
    
    
      <category term="http" scheme="https://jobscn.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>【HTTP】请求首部字段</title>
    <link href="https://jobscn.github.io/network/http/header/http-head-request.html"/>
    <id>https://jobscn.github.io/network/http/header/http-head-request.html</id>
    <published>2019-01-24T05:54:00.000Z</published>
    <updated>2019-07-08T02:45:30.115Z</updated>
    
    <content type="html"><![CDATA[<p>请求报文中所使用的字段，往往是用于补充请求信息、客户端信息，对响应内容的数据要求等。</p><h1 id="1-Accept"><a href="#1-Accept" class="headerlink" title="1.Accept"></a>1.Accept</h1><p>通常Accept使用<code>type/subtype</code>形式，一次可指定多种媒体类型，按优先顺序排列。</p><p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept: text/plain; q=0.3, text/html</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>类型</th><th>参数</th></tr></thead><tbody><tr><td>文本文件</td><td><code>text/html</code> <code>text/plain</code> <code>text/css</code> <code>applicaation/xhtml+xml</code> <code>application/xml</code></td></tr><tr><td>图片文件</td><td><code>image/jpeg</code> <code>image/gif</code> <code>image/png</code></td></tr><tr><td>视频文件</td><td><code>video/mpeg</code> <code>video/quicktime</code></td></tr><tr><td>应用程序</td><td><code>application/octet-stream</code> <code>application/zip</code></td></tr></tbody></table><p>比如，浏览器不支持处理png格式图片，那么就可以指定为<code>image/gif</code>与<code>image/jpeg</code>等类型。</p><p>若要给媒体类型增加显式优先级，那么可以使用<code>q=</code>来指定权重值，并使用<code>;</code>分割，权重值范围为0~1(可精确到小数点后3位)，不指定时，权重值默认为1.0.</p><p>服务器提供多种内容时，会优先提供并返回权重值最高的媒体类型。</p><h1 id="2-Accept-Charset"><a href="#2-Accept-Charset" class="headerlink" title="2.Accept-Charset"></a>2.Accept-Charset</h1><p>用来同志服务器用户代理支持的字符集，及优先使用的字符相对顺序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept-Charset: iso-8859-5, unicode-1-1; q=0.8</span><br></pre></td></tr></table></figure><p>同样的，用q来表示权重。</p><p>该字段应用于内容协商机制的服务器驱动协商。</p><h1 id="3-Accept-Encoding"><a href="#3-Accept-Encoding" class="headerlink" title="3.Accept-Encoding"></a>3.Accept-Encoding</h1><p>用来告知服务器用户代理支持的内容编码及内容编码的优先级顺序。</p><table><thead><tr><th>编码</th><th>解释</th></tr></thead><tbody><tr><td>gzip</td><td>GNU zip编码格式(RFC1952)，采用LZ77算法及32位循环冗余校验</td></tr><tr><td>compress</td><td>由UNIX文件压缩程序compress生成的编码格式，采用LZW算法</td></tr><tr><td>deflate</td><td>组合使用zlib格式(RFC1950)及由deflate压缩算法(RFC1951)生成的编码格式</td></tr><tr><td>identity</td><td>不进行任何压缩</td></tr><tr><td>*</td><td>指定任意编码格式</td></tr></tbody></table><h1 id="4-Accept-Language"><a href="#4-Accept-Language" class="headerlink" title="4.Accept-Language"></a>4.Accept-Language</h1><p>告知服务器使用的语言集</p><h1 id="5-Authorization-对应前序状态401"><a href="#5-Authorization-对应前序状态401" class="headerlink" title="5.Authorization(对应前序状态401)"></a>5.Authorization(对应前序状态401)</h1><p>在客户端请求时，得到一个401 Unauthorized, WWW-Authenticate: Basic …报文时，需要继续请求并附带Authorization字段的认证报文给服务器。</p><h1 id="6-Expect-对应状态417"><a href="#6-Expect-对应状态417" class="headerlink" title="6.Expect(对应状态417)"></a>6.Expect(对应状态417)</h1><p>告知服务器，期望出现某种特定行为，若无法达成期望，会返回状态417 Expectation Failed。</p><p>HTTP/1.1只规定了100-continue，即指定Expect: 100-continue</p><h1 id="7-From"><a href="#7-From" class="headerlink" title="7.From"></a>7.From</h1><p>告知服务器使用用户代理的用户的电子邮箱地址，可能会因代理不同，记录在User-Agent字段内。</p><h1 id="8-Host"><a href="#8-Host" class="headerlink" title="8.Host"></a>8.Host</h1><p>指定请求资源所在处的互联网主机名及端口，该字段是<strong><em>唯一一个HTTP/1.1规定中必须包含在请求内的首部字段</em></strong></p><p>请求中，域名会被替换为IP来寻找服务器。当同一个IP中部署多台服务器时，Host字段用来辨别应是哪一台服务器接收这个请求。</p><h1 id="9-If-Match-对应状态412-Precondition-Failed"><a href="#9-If-Match-对应状态412-Precondition-Failed" class="headerlink" title="9.If-Match(对应状态412 Precondition Failed)"></a>9.If-Match(对应状态412 Precondition Failed)</h1><p>与资源实体标记(ETag)相关，只有当If-Match的值与ETag值匹配时，服务器才会接受请求。反之，返回状态412 Precondition Failed的响应。</p><p>还可使用*指定If-Match的值，针对这种情况，服务器将会忽略ETag的值，资源存在便去处理。</p><p>通常，资源在被更新后，ETag值都会改变。</p><h1 id="10-If-Modified-Since-304-Not-Modified"><a href="#10-If-Modified-Since-304-Not-Modified" class="headerlink" title="10.If-Modified-Since(304 Not Modified)"></a>10.If-Modified-Since(304 Not Modified)</h1><p>作用：若在指定日期后，资源发生了更新，则接受请求</p><p>失败返回：304 Not Modified</p><h1 id="11-If-None-Match"><a href="#11-If-None-Match" class="headerlink" title="11.If-None-Match"></a>11.If-None-Match</h1><p>作用：当ETag值不符合时接受请求，与If-Match正好相反。在使用GET、HEAD请求时，功能与If-Modified-Since类似</p><h1 id="12-If-Range-412-Precondition-Failed"><a href="#12-If-Range-412-Precondition-Failed" class="headerlink" title="12.If-Range(412 Precondition Failed)"></a>12.If-Range(412 Precondition Failed)</h1><p>作用：作为Range的附带条件，若If-Range指定的值等于资源的ETag值或资源的更新日期，则接受并做范围请求处理。反之，返回全部资源</p><p>原因：若使用If-Match来校验ETag值，Range请求在失败时将得到412的状态码，这时需要重新发起一次请求，去获取全部资源。一共使用了2个请求，才能完成一个目的，而If-Range正好去掉了这多余的一步。</p><h1 id="13-If-Unmodified-Since"><a href="#13-If-Unmodified-Since" class="headerlink" title="13.If-Unmodified-Since"></a>13.If-Unmodified-Since</h1><p>与If-Modified-Since作用正好相反，资源指定资源在指定日期后未更新则返回。</p><p>反之，返回412 Precondition Failed</p><h1 id="14-Max-Forwards"><a href="#14-Max-Forwards" class="headerlink" title="14.Max-Forwards"></a>14.Max-Forwards</h1><p>跳数，每次代理服务器转发就-1。当值为0时返回响应。</p><p>通常通过TRACE或OPTIONS方法，发送包含首部Max-Forwards的请求时，指定可经过服务器的最大数目，当值为0时不在转发，并直接响应。</p><p>有些时候，我们不能确定服务器传输线路中哪一台服务器发生了故障，而这个方法可以帮我们对此类问题展开调查，当字段值为0时，会立即返回，至少可以得知对应服务器的通信状态。</p><h1 id="15-Proxy-Authorization"><a href="#15-Proxy-Authorization" class="headerlink" title="15.Proxy-Authorization"></a>15.Proxy-Authorization</h1><p>客户端与服务器之间的认证使用Authorization。与此相似，而客户端与代理服务器之间的认证，使用该字段。</p><h1 id="16-Range"><a href="#16-Range" class="headerlink" title="16.Range"></a>16.Range</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Range: bytes=5001-10000</span><br></pre></td></tr></table></figure><p>设定范围请求，若成功，返回206 Partial Content响应，无法处理时，会返回200 OK以及资源全部内容。</p><h1 id="17-Referer"><a href="#17-Referer" class="headerlink" title="17.Referer"></a>17.Referer</h1><p>Referer字段会告知服务器，请求原始资源的URI，一般都会发送，但有时处于安全性考虑，也可以不发送该字段。（当原始资源URI的查询字符串中涉及ID及密码等）</p><p>注：正确拼法为Referrer，但大家一直沿用这种错误的拼写。</p><h1 id="18-TE"><a href="#18-TE" class="headerlink" title="18.TE"></a>18.TE</h1><p>首部字段TE会告知服务端客户端所能处理的传输编码以及优先级，与字段Accept-Encoding功能相似，但是用于传输编码。</p><p>与Transfer-Encoding是一对，Transfer-Encoding表明已指定的传输编码（如chunked）。</p><p>同时，可用于指定伴随trailers字段的分块传输编码方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TE: trailers</span><br></pre></td></tr></table></figure><h1 id="19-User-Agent"><a href="#19-User-Agent" class="headerlink" title="19.User-Agent"></a>19.User-Agent</h1><p>告知服务器创建请求时的浏览器和用户代理名称等信息。</p><p>需要知道的是，由网络爬虫发起的请求，可能会在字段内添加爬虫作者的电子邮箱。此外，若请求经过代理，也可能会被添加上代理服务器的名称</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://cloud.tencent.com/developer/section/1190003" target="_blank" rel="noopener">腾讯云HTTP文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;请求报文中所使用的字段，往往是用于补充请求信息、客户端信息，对响应内容的数据要求等。&lt;/p&gt;
&lt;h1 id=&quot;1-Accept&quot;&gt;&lt;a href=&quot;#1-Accept&quot; class=&quot;headerlink&quot; title=&quot;1.Accept&quot;&gt;&lt;/a&gt;1.Accept&lt;/h1
      
    
    </summary>
    
      <category term="network" scheme="https://jobscn.github.io/categories/network/"/>
    
      <category term="http" scheme="https://jobscn.github.io/categories/network/http/"/>
    
      <category term="header" scheme="https://jobscn.github.io/categories/network/http/header/"/>
    
    
      <category term="http" scheme="https://jobscn.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>【HTTP】响应首部字段</title>
    <link href="https://jobscn.github.io/network/http/header/http-head-response.html"/>
    <id>https://jobscn.github.io/network/http/header/http-head-response.html</id>
    <published>2019-01-24T05:54:00.000Z</published>
    <updated>2019-07-08T02:45:36.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Accept-Ranges"><a href="#1-Accept-Ranges" class="headerlink" title="1.Accept-Ranges"></a>1.Accept-Ranges</h1><p>告知客户端能否处理范围请求，只有两个值</p><p>bytes：能处理<br><br>none：不能处理范围请求</p><h1 id="2-Age"><a href="#2-Age" class="headerlink" title="2.Age"></a>2.Age</h1><p>代理创建响应时，必须加上Age字段。</p><p>用于缓存服务器告知客户端，即将返回的响应是在多久前被源服务器所创建的。</p><h1 id="3-ETag"><a href="#3-ETag" class="headerlink" title="3.ETag"></a>3.ETag</h1><p>首部字段ETag能告知客户端实体标识，服务器会对每份资源分配对应的ETag值。</p><p>另外，当资源更新时，ETag值也需要被更新。它没有统一的算法，仅仅由服务器来分配。</p><h2 id="3-1-强ETag值"><a href="#3-1-强ETag值" class="headerlink" title="3.1 强ETag值"></a>3.1 强ETag值</h2><p>不论实体发生多么席位的变化，都会改变ETag值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ETag: &quot;352b-540b1498e39c0&quot;</span><br></pre></td></tr></table></figure><h2 id="3-2-弱ETag值"><a href="#3-2-弱ETag值" class="headerlink" title="3.2 弱ETag值"></a>3.2 弱ETag值</h2><p>只用于提示资源是否相同，只有资源发生了根本改变，产生差异时，才会改变ETag值。会在字段值最开始处附加W/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ETag: W/&quot;352b-540b1498e39c0&quot;</span><br></pre></td></tr></table></figure><h1 id="4-Location-302-Redirect"><a href="#4-Location-302-Redirect" class="headerlink" title="4.Location(302 Redirect)"></a>4.Location(302 Redirect)</h1><p>通常在请求时，若发生重定向，则会附带Location字段表明重定向后的资源URI</p><p>请求时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /sample.htm</span><br></pre></td></tr></table></figure></p><p>若资源已被临时转移，则返回<br><br><code>302 Redirect</code><br><br><code>Location: http://www.test.com/sample.htm</code></p><p>再次向新的URI请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /smaple.html</span><br></pre></td></tr></table></figure></p><p>返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">200 OK</span><br></pre></td></tr></table></figure></p><h1 id="5-Proxy-Authenticate-WWW-Authenticate"><a href="#5-Proxy-Authenticate-WWW-Authenticate" class="headerlink" title="5.Proxy-Authenticate/WWW-Authenticate"></a>5.Proxy-Authenticate/WWW-Authenticate</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Proxy-Authenticate: Basic realm=&quot;Usagidesign Auth&quot;</span><br></pre></td></tr></table></figure><p>该字段将代理服务器所要求的认证信息发送给客户端。</p><p>该行为发生在客户端与代理之间。而WWW-Authorization发生在客户端与服务器之间。</p><p>realm字段的字符串是为了辨别请求URI指定资源所受到的保护策略。</p><h1 id="6-Retry-After"><a href="#6-Retry-After" class="headerlink" title="6.Retry-After"></a>6.Retry-After</h1><p>告知客户端应在多久后再次发送请求。主要配合<code>503 Service Unavailable</code>响应、<code>3xx Redirect</code>响应使用。</p><p>可以是创建后的秒数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Retry-After: 120</span><br></pre></td></tr></table></figure></p><p>也可以是具体时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Retry-After: Wed, 04 Jul 2012 06: 34: 24 GMT</span><br></pre></td></tr></table></figure></p><h1 id="7-Server"><a href="#7-Server" class="headerlink" title="7.Server"></a>7.Server</h1><p>告知客户端当前服务器上安装的HTTP服务器应用程序的信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server: Apache/2.2.17 (Unix)</span><br></pre></td></tr></table></figure></p><h1 id="8-Vary"><a href="#8-Vary" class="headerlink" title="8.Vary"></a>8.Vary</h1><p>Vary字段指定一个字段，当代理服务器收到的请求包含被指定的字段时，如果请求中对应字段的值与响应中对应字段的值相同，那么直接从缓存服务器返回响应。反之从源服务器获取资源后作为响应返回。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vary: Accept-Language</span><br></pre></td></tr></table></figure></p><p>请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /sample.html HTTP/1.1</span><br><span class="line">...</span><br><span class="line">Accept-Language: en-us</span><br></pre></td></tr></table></figure></p><p>源服务器响应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /sample.html HTTP/1.1</span><br><span class="line">...</span><br><span class="line">Accept-Language: en-us</span><br><span class="line">Vary: Accept-Language</span><br></pre></td></tr></table></figure></p><p>那么代理服务器找到Vary所指定的字段Accept-Language后，并且将请求报文与响应报文重的Accept-Language值做对比，发现相同。代理服务器将直接返回缓存内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Accept-Ranges&quot;&gt;&lt;a href=&quot;#1-Accept-Ranges&quot; class=&quot;headerlink&quot; title=&quot;1.Accept-Ranges&quot;&gt;&lt;/a&gt;1.Accept-Ranges&lt;/h1&gt;&lt;p&gt;告知客户端能否处理范围请求，只有两个
      
    
    </summary>
    
      <category term="network" scheme="https://jobscn.github.io/categories/network/"/>
    
      <category term="http" scheme="https://jobscn.github.io/categories/network/http/"/>
    
      <category term="header" scheme="https://jobscn.github.io/categories/network/http/header/"/>
    
    
      <category term="http" scheme="https://jobscn.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>【HTTP】关于首部字段via</title>
    <link href="https://jobscn.github.io/network/http/header/http-head-via.html"/>
    <id>https://jobscn.github.io/network/http/header/http-head-via.html</id>
    <published>2019-01-24T05:54:00.000Z</published>
    <updated>2019-07-08T02:51:25.670Z</updated>
    
    <content type="html"><![CDATA[<p>Via属于通用首部字段，即请求与响应均可持有的字段。</p><h1 id="Via字段使用在哪里"><a href="#Via字段使用在哪里" class="headerlink" title="Via字段使用在哪里"></a>Via字段使用在哪里</h1><p>使用首部字段Via是为了追踪客户端与服务器之间的请求和响应报文的传输路径。</p><p>报文经过代理或网关时，会先在首部字段Via中附加该服务器的信息，然后再进行转发。这个做法和traceroute及电子邮件的Received首部工作机制很类似。</p><h1 id="使用Via字段的意义"><a href="#使用Via字段的意义" class="headerlink" title="使用Via字段的意义"></a>使用Via字段的意义</h1><p>使用首部字段，可以避免请求回环的发生，必须在经过代理时附加该首部字段内容。</p><p>客户端发出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br></pre></td></tr></table></figure></p><p>代理1接收并发出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Via: 1.0 gw.hackr.jp( Squid/3.1)</span><br></pre></td></tr></table></figure></p><p>代理2接收并发出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Via: 1.0 gw.hackr.jp( Squid/3.1 ),</span><br><span class="line">1.1 a1.example.com( Squid/2.7 )</span><br></pre></td></tr></table></figure></p><p>最终由源服务器收到上述报文。</p><p>行头1.0表示接收请求的服务器上所应用的HTTP协议版本，在经过代理服务器B时，同样会写入这些信息。</p><p>Via首部是为了追踪传输路径，所以常会与TRACE方法放在一起使用。比如，代理服务器收到TRACE方法发送过来的请求（其中Max-Forwards: 0）时，代理服务器就不能转发该请求。并将自身的信息附加到Via首部后，返回该请求响应。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Via属于通用首部字段，即请求与响应均可持有的字段。&lt;/p&gt;
&lt;h1 id=&quot;Via字段使用在哪里&quot;&gt;&lt;a href=&quot;#Via字段使用在哪里&quot; class=&quot;headerlink&quot; title=&quot;Via字段使用在哪里&quot;&gt;&lt;/a&gt;Via字段使用在哪里&lt;/h1&gt;&lt;p&gt;使用首部
      
    
    </summary>
    
      <category term="network" scheme="https://jobscn.github.io/categories/network/"/>
    
      <category term="http" scheme="https://jobscn.github.io/categories/network/http/"/>
    
      <category term="header" scheme="https://jobscn.github.io/categories/network/http/header/"/>
    
    
      <category term="http" scheme="https://jobscn.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>【HTTP】安全的HTTP -- HTTPS</title>
    <link href="https://jobscn.github.io/network/http/http-ssl.html"/>
    <id>https://jobscn.github.io/network/http/http-ssl.html</id>
    <published>2019-01-24T05:54:00.000Z</published>
    <updated>2019-07-08T02:50:33.004Z</updated>
    
    <content type="html"><![CDATA[<p>在HTTP通信中，报文通常都以明文方式进行传输，如何保证报文的安全。<br><br>通常有两类加密方式可以保证数据的安全，一类是对称加密，一类是非对称加密。其中，对称加密由于需要共享一份相同的密钥，这份密钥的交换方式存在泄漏风险。而采用非对称加密却因为算法的复杂，导致频繁的加密解密使得效率下降。</p><h1 id="如何尽可能高效率的保证HTTP通信的安全-混合加密机制"><a href="#如何尽可能高效率的保证HTTP通信的安全-混合加密机制" class="headerlink" title="如何尽可能高效率的保证HTTP通信的安全(混合加密机制)"></a>如何尽可能高效率的保证HTTP通信的安全(混合加密机制)</h1><p>HTTPS(HTTP Secure)采用了混合加密机制，同时使用了共享密钥加密以及非对称加密两种方式，来保证报文尽可能的安全的前提下，加密解密的效率的提高。<br><br>在交换密钥缓解采用非对称加密方式，建立通信后在交换报文阶段则采用共享密钥加密方式。</p><p>见《图解HTTP》[7.2][p147]</p><p>但是，这种方式依然存在弊端，我们设想若发生以下场景</p><pre><code>1. 攻击者在中间篡改了服务端发送给客户端的公2. 客户端使用虚假公钥对数据进行加密并发送3. 处在中间的攻击者的使用私钥解密数据，...</code></pre><p>显然，单靠报文交换密钥，永远存在风险</p><h1 id="为了证明服务器所采用的数字证书"><a href="#为了证明服务器所采用的数字证书" class="headerlink" title="为了证明服务器所采用的数字证书"></a>为了证明服务器所采用的数字证书</h1><p>首先，需要了解什么是数字证书认证机构(CA)，CA就是一个第三方的受到通信双方信赖的机构。通常在个人电脑或浏览器内，都会自带一系列值得信赖的第三方CA所签发的根证书。</p><p>一个公钥向CA申请证书，CA对该公钥进行数字签名（使用私钥对摘要进行加密）。形成「公钥+数字签名」的数字证书，发放给客户端，客户端通过已有的对应签发机构的根证书（CA的未加密公钥）对传来的数字证书之中的数字签名进行验证，即可证明目标服务器的真假。</p><p>通常，只有服务器持有证书，客户端只需要验证目标服务器的真伪即可。但在某些情况下，客户端也需要持有数字证书，双方的真伪都需要进行验证，常在<code>网上银行</code>、<code>在线支付</code>等特殊场景下存在这一需求。</p><blockquote><p>如何确保网络文件的安全、完整性、来源可靠，通常也采用混合加密机制。<br><br>A向B传送文件：<br><br>1.A计算文件摘要，使用A私钥加密摘要（生成数字签名） <br><br>2.使用某一个对称密码加密文件内容<br> 3.使用B的公钥加密对称密码。<br><br>B从A接收文件：<br><br>1.使用B的私钥解密对称密码<br> 2.使用对称密码解密文件内容<br><br>3.生成内容摘要，使用A的公钥验证数字签名与摘要的一致性（这一步使得内容完整性以及文件来源得以认证）</p></blockquote><h1 id="一个HTTPS通信的完整流程"><a href="#一个HTTPS通信的完整流程" class="headerlink" title="一个HTTPS通信的完整流程"></a>一个HTTPS通信的完整流程</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1. SSL Handshake:ClientHello</span><br><span class="line">(携带支持的SSL版本号等必要信息，生成随机明文1)</span><br><span class="line">2. SSL Handshake:ServerHello</span><br><span class="line">(表示收到，返回使用的版本号等必要信息，生成随机明文2)</span><br><span class="line">3. SSL Handshake:Server Certificate</span><br><span class="line">(服务器发送公钥证书报文)</span><br><span class="line">4. SSL Handshake:ServerHelloDone</span><br><span class="line">(第一阶段握手完成)</span><br><span class="line">----------------------------------</span><br><span class="line">(客户端验证证书通过)</span><br><span class="line">5. SSL Handshake:ClientKeyExchange</span><br><span class="line">(交换通信加密所使用的Pre-master secret随机密码串)</span><br><span class="line">6. Client ChangeCipherSpec</span><br><span class="line">    1) 使用随机明文1、2以及Pre-master生成对称密码。</span><br><span class="line">    2) 表示以后的通信都使用Pre-master secret生成的密钥来加密</span><br><span class="line">7. SSL Handshake:Client Finished</span><br><span class="line">encrypted_handshake_message包含先前所有握手消息的hash，可用于server验证握手过程是否被篡改</span><br><span class="line">8. Server ChangeCipherSpec</span><br><span class="line">    同6</span><br><span class="line">    1) 使用随机明文1、2以及Pre-master生成对称密码</span><br><span class="line">    2) 并告知客户端后续采用对称加密</span><br><span class="line">9. SSL Handshake:Server Finished</span><br><span class="line">(包含之前所有参数的hash，并解密客户端发来的encrypted_handshake_message，验证握手是否被篡改)</span><br><span class="line">10.Client Application Data</span><br><span class="line">( 经过master secret加密的HTTP请求 )</span><br><span class="line">11.Server Application Data</span><br><span class="line">( 经过master secret加密的HTTP响应 )</span><br><span class="line">12.Alert: warning, close notify</span><br><span class="line">( 通信结束 )</span><br></pre></td></tr></table></figure><p>具体通信数据二进制分析可参考<br><a href="https://blog.csdn.net/tterminator/article/details/50675540" target="_blank" rel="noopener">https://blog.csdn.net/tterminator/article/details/50675540</a></p><p>具体步骤详解可参考<br><a href="https://blog.csdn.net/xulujuncsdn/article/details/71320490" target="_blank" rel="noopener">https://blog.csdn.net/xulujuncsdn/article/details/71320490</a></p><p>同时，<code>Application Data</code>会附加一种叫做<code>MAC(Message Authentication Code)</code>的报文摘要，用以验证报文的完整性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在HTTP通信中，报文通常都以明文方式进行传输，如何保证报文的安全。&lt;br&gt;&lt;br&gt;通常有两类加密方式可以保证数据的安全，一类是对称加密，一类是非对称加密。其中，对称加密由于需要共享一份相同的密钥，这份密钥的交换方式存在泄漏风险。而采用非对称加密却因为算法的复杂，导致频繁的
      
    
    </summary>
    
      <category term="network" scheme="https://jobscn.github.io/categories/network/"/>
    
      <category term="http" scheme="https://jobscn.github.io/categories/network/http/"/>
    
    
      <category term="http" scheme="https://jobscn.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>【C++】【STL】迭代器(iterator)篇之traits技术详解</title>
    <link href="https://jobscn.github.io/cpp/stl/iterator/stl-iterator-traits.html"/>
    <id>https://jobscn.github.io/cpp/stl/iterator/stl-iterator-traits.html</id>
    <published>2019-01-11T14:51:23.000Z</published>
    <updated>2019-03-05T14:12:19.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是iterator-traits"><a href="#什么是iterator-traits" class="headerlink" title="什么是iterator_traits"></a>什么是iterator_traits</h1><p>iterator_traits是一种模板返回类型推导的技巧，主要是通过一层返回类型的封装，使得返回类型更加灵活。</p><p>在不使用iterator_traits技术时，迭代器的返回类型可以使用内嵌类型声明的方式实现，比如下面这种方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iterator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> T value_type; <span class="comment">// 内嵌类型声明</span></span><br><span class="line">    </span><br><span class="line">    Iterator(T* value):m_ptr(value)&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *m_ptr;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* m_ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Iterator&gt;</span><br><span class="line"><span class="keyword">typename</span> Iterator::value_type <span class="comment">// 使用内嵌类型声明为函数设定返回值类型</span></span><br><span class="line">func(Iterator iter)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> *iter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Iterator&lt;<span class="keyword">int</span>&gt; iter(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;func(iter)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据定义，原生指针本身也是一种迭代器，而这种写法无法满足这一条件，这时，iterator_traits便能大显身手。</p><p>定义一个Iterator_traits用作类型萃取<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Iterator&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Iterator_traits</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> Iterator::value_type value_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>将刚才的func修改为<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Iterator&gt;</span><br><span class="line"><span class="keyword">typename</span> Iterator_traits&lt;Iterator&gt;::value_type</span><br><span class="line">func(Iterator iter)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> *iter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这一行为，看起来使得func函数更加冗余，但他可以轻松得另func函数支持原生指针，那就是令traits模板偏特化！</p><p>增加两个traits偏特化版本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Iterator_traits</span>&lt;T*&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T value_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Iterator_traits</span>&lt;const T*&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T value_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>修改main函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">int</span>* p = &amp;a;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;func(p)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序通过编译，并成功输出123。</p><p>同样的，最常用到的迭代器相应型别有五种，定义traits时，同样定义这五种类型。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::iterator_category iterator_category;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::value_type value_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::difference_type difference_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::pointer pointer;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::reference reference;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="1-value-type"><a href="#1-value-type" class="headerlink" title="1. value_type"></a>1. value_type</h2><p>表示迭代器所指对象类型</p><h2 id="2-difference-type"><a href="#2-difference-type" class="headerlink" title="2. difference_type"></a>2. difference_type</h2><p>通常用来表示两个迭代器间的距离，因此也可以表示一个容器的最大容量，如果一个范型算法提供计数功能，如STL提供count函数，其传回值就必须使用difference_type</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">typename</span> <span class="title">iterator_traits</span>&lt;T&gt;:</span>:different_type</span><br><span class="line">count(I first, I last, <span class="keyword">const</span> T&amp; value)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typename</span> iterator_traits&lt;I&gt;::different_type n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; first != last; ++first)</span><br><span class="line">        <span class="keyword">if</span>( *first == value)</span><br><span class="line">            ++n;</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对原生指针来说，通常在偏特化时使用ptrdiff_t(定义于<cstddef>之中)。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::difference_type difference_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 针对原生指针设计的偏特化</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&lt;T*&gt;&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 针对原生的pointer-to-const设计的偏特化版</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&lt;const T*&gt;&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></cstddef></p><p>因此，任何时候当我们需要迭代器的difference_type时，可以这样写<br><code>typename iterator_traits&lt;I&gt;::difference_type</code></p><h2 id="3-reference-type于pointer-type"><a href="#3-reference-type于pointer-type" class="headerlink" title="3 reference_type于pointer_type"></a>3 reference_type于pointer_type</h2><p>reference_type表示迭代器所指之物的引用，pointer_type表示迭代器所指之物的指针。迭代器分为两种：mutable_iterators、constant_iterators。<br>一种属于左值，另一种属于右值。</p><p>通常c++要传回左值，都是以by reference的方式进行，所以当一个mutable iterators的value_type是T时，*p应当是T&amp;。而constant iterators的*p不应该是const T，而是const T&amp;。</p><p><strong><em>这里所讨论的\</em>p即reference_type*</strong></p><p>同样的，p-&gt;则能获取到迭代器所指之物的地址。</p><p>现在我们来看看对应的traits<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::reference reference;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::pointer pointer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&lt;I*&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> I&amp; reference;</span><br><span class="line">    <span class="keyword">typedef</span> I* pointer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&lt;const I*&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">const</span> I&amp; reference;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">const</span> I* pointer;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="什么是type-traits"><a href="#什么是type-traits" class="headerlink" title="什么是type_traits"></a>什么是type_traits</h1><p>在SGI STL中，定义了type_traits及一系列拓展，与iterator_traits类似，皆旨在编译期令程序代码知道一些类的特性。</p><p>见STL源码剖析3.7(p103)</p><p>macOS部分type_traits内容摘抄</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt; <span class="title">struct</span> _<span class="title">LIBCPP_TEMPLATE_VIS</span> <span class="title">is_lvalue_reference</span>       :</span> <span class="keyword">public</span> false_type &#123;&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt; <span class="title">struct</span> _<span class="title">LIBCPP_TEMPLATE_VIS</span> <span class="title">is_lvalue_reference</span>&lt;_Tp&amp;&gt; :</span> <span class="keyword">public</span> true_type &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt; <span class="title">struct</span> _<span class="title">LIBCPP_TEMPLATE_VIS</span> <span class="title">is_rvalue_reference</span>        :</span> <span class="keyword">public</span> false_type &#123;&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _LIBCPP_HAS_NO_RVALUE_REFERENCES</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt; <span class="title">struct</span> _<span class="title">LIBCPP_TEMPLATE_VIS</span> <span class="title">is_rvalue_reference</span>&lt;_Tp&amp;&amp;&gt; :</span> <span class="keyword">public</span> true_type &#123;&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt; <span class="title">struct</span> _<span class="title">LIBCPP_TEMPLATE_VIS</span> <span class="title">is_reference</span>        :</span> <span class="keyword">public</span> false_type &#123;&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt; <span class="title">struct</span> _<span class="title">LIBCPP_TEMPLATE_VIS</span> <span class="title">is_reference</span>&lt;_Tp&amp;&gt;  :</span> <span class="keyword">public</span> true_type &#123;&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _LIBCPP_HAS_NO_RVALUE_REFERENCES</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt; <span class="title">struct</span> _<span class="title">LIBCPP_TEMPLATE_VIS</span> <span class="title">is_reference</span>&lt;_Tp&amp;&amp;&gt; :</span> <span class="keyword">public</span> true_type &#123;&#125;;</span><br></pre></td></tr></table></figure><p>is_same的设计相当巧妙，摘抄源码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// is_same</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>, <span class="title">class</span> _<span class="title">Up</span>&gt; <span class="title">struct</span> _<span class="title">LIBCPP_TEMPLATE_VIS</span> <span class="title">is_same</span>           :</span> <span class="keyword">public</span> false_type &#123;&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;            <span class="title">struct</span> _<span class="title">LIBCPP_TEMPLATE_VIS</span> <span class="title">is_same</span>&lt;_Tp, _Tp&gt; :</span> <span class="keyword">public</span> true_type &#123;&#125;;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>iterator_traits参考：<br><a href="https://blog.csdn.net/shudou/article/details/10270971" target="_blank" rel="noopener">https://blog.csdn.net/shudou/article/details/10270971</a></p><p>STL源码剖析(侯捷译):85页</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是iterator-traits&quot;&gt;&lt;a href=&quot;#什么是iterator-traits&quot; class=&quot;headerlink&quot; title=&quot;什么是iterator_traits&quot;&gt;&lt;/a&gt;什么是iterator_traits&lt;/h1&gt;&lt;p&gt;iterat
      
    
    </summary>
    
      <category term="cpp" scheme="https://jobscn.github.io/categories/cpp/"/>
    
      <category term="stl" scheme="https://jobscn.github.io/categories/cpp/stl/"/>
    
      <category term="iterator" scheme="https://jobscn.github.io/categories/cpp/stl/iterator/"/>
    
    
      <category term="cpp" scheme="https://jobscn.github.io/tags/cpp/"/>
    
      <category term="stl" scheme="https://jobscn.github.io/tags/stl/"/>
    
      <category term="iterator" scheme="https://jobscn.github.io/tags/iterator/"/>
    
      <category term="traits" scheme="https://jobscn.github.io/tags/traits/"/>
    
  </entry>
  
</feed>
