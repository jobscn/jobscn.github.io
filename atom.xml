<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jobscn&#39;s blog</title>
  
  <subtitle>纸上得来终觉浅，绝知此事要躬行</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jobscn.github.io/"/>
  <updated>2019-03-05T14:41:24.571Z</updated>
  <id>https://jobscn.github.io/</id>
  
  <author>
    <name>Jobscn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>database_indexing</title>
    <link href="https://jobscn.github.io/dbms/database-indexing.html"/>
    <id>https://jobscn.github.io/dbms/database-indexing.html</id>
    <published>2019-03-05T14:38:41.000Z</published>
    <updated>2019-03-05T14:41:24.571Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h1><p>索引是为了提高数据检索速度而提前建立的相关数据结构。</p><h1 id="为什么要使用索引"><a href="#为什么要使用索引" class="headerlink" title="为什么要使用索引"></a>为什么要使用索引</h1><ol><li>索引大大减少了存储引擎需要扫描的数据量</li><li>加快排序的速度，Btree索引本身所具备的排序功能帮助数据库避免使用临时表来进行排序</li><li>索引可以使得随机I/O变为顺序I/O，分布在磁盘各处的数据，经过索引的串联形成一定顺序。</li></ol><h1 id="B树与B-树"><a href="#B树与B-树" class="headerlink" title="B树与B+树"></a>B树与B+树</h1><blockquote><p>MyISAM和Innodb通常使用BTree索引</p></blockquote><blockquote><p>平衡二叉树: <a href="https://blog.csdn.net/saasanken/article/details/80796178" target="_blank" rel="noopener">https://blog.csdn.net/saasanken/article/details/80796178</a></p></blockquote><p>主流数据库所采用的索引数据结构，基本上都是<code>b tree</code>与<code>b+ tree</code>，少数部分采用哈系桶作为索引的数据结构。因此，理解B树与B+树是相当重要的一个内容。</p><p>B+树是B树的一种变形，在了解B+树之前，先看看什么是B树。</p><h2 id="什么是B树"><a href="#什么是B树" class="headerlink" title="什么是B树"></a>什么是B树</h2><blockquote><p>建议参考: <a href="https://www.cnblogs.com/vincently/p/4526560.html" target="_blank" rel="noopener">https://www.cnblogs.com/vincently/p/4526560.html</a><br>B树是一种2-3树的扩展，B树的特征如下:</p><ul><li>根节点至少有2个子节点</li><li>满足类似平衡二叉树的特征</li></ul></blockquote><p>B树插入节点时，当节点内的关键字(索引值)超过B树的阶时，自动选取当前节点中的节点中间值，</p><p>具体数据结构:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span>  </span><br><span class="line">    <span class="keyword">int</span> keynum;             <span class="comment">/* 结点中关键码的个数，即结点的大小*/</span>  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">parent</span>;</span>    <span class="comment">/*指向双亲结点*/</span>   </span><br><span class="line">    KeyType key[m+<span class="number">1</span>];       <span class="comment">/*关键码向量，0 号单元未用*/</span>   </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">ptr</span>[<span class="title">m</span>+1];</span>  <span class="comment">/*子树指针向量*/</span>   </span><br><span class="line">    Record *recptr[m+<span class="number">1</span>];    <span class="comment">/*记录指针向量*/</span>  </span><br><span class="line">&#125;NodeType;                  <span class="comment">/*B 树结点类型*/</span></span><br></pre></td></tr></table></figure></p><p>当节点内的指针数超过阀值时，需要拆分节点<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">SplitBTNode函数</span><br><span class="line">功能：将结点p分裂成两个结点,前一半保留,后一半移入结点q</span><br><span class="line">代码实现：</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SplitBTNode</span><span class="params">(BTNode *&amp;p,BTNode *&amp;q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> s=(m+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    q=(BTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTNode));             <span class="comment">//给结点q分配空间</span></span><br><span class="line"></span><br><span class="line">    q-&gt;ptr[<span class="number">0</span>]=p-&gt;ptr[s];                            <span class="comment">//后一半移入结点q</span></span><br><span class="line">    <span class="keyword">for</span>(i=s+<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        q-&gt;key[i-s]=p-&gt;key[i];</span><br><span class="line">        q-&gt;ptr[i-s]=p-&gt;ptr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    q-&gt;keynum=p-&gt;keynum-s;                </span><br><span class="line">    q-&gt;parent=p-&gt;parent;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=p-&gt;keynum-s;i++)                         <span class="comment">//修改双亲指针 </span></span><br><span class="line">        <span class="keyword">if</span>(q-&gt;ptr[i]!=<span class="literal">NULL</span>) </span><br><span class="line">            q-&gt;ptr[i]-&gt;parent=q;</span><br><span class="line">    p-&gt;keynum=s<span class="number">-1</span>;                              <span class="comment">//结点p的前一半保留,修改结点p的keynum</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要知道的是，B树所有叶节点处在同一层上。同时，每一层的所有节点都是相互连接的，便于按顺序向下遍历。</p><h2 id="什么是B-树"><a href="#什么是B-树" class="headerlink" title="什么是B+树"></a>什么是B+树</h2><p>相比于B树，B+树的区别在于，有多少个关键字就有多少个叶子节点，而其他节点只用作索引，并不保存数据。</p><h1 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h1><p>memory存储引擎通常使用哈希索引</p><p>基于哈希表实现，只有查询条件精确匹配哈希表中的所有列，才能使用到哈希索引。</p><p>对于hash索引中的所有列，存储引擎会为每一行计算一个hash码，hash索引中存储的就是hash码，因此只能满足全值匹配。</p><h1 id="数据库中的索引"><a href="#数据库中的索引" class="headerlink" title="数据库中的索引"></a>数据库中的索引</h1><h2 id="聚集索引"><a href="#聚集索引" class="headerlink" title="聚集索引"></a>聚集索引</h2><p>在建表时，如果不为表设置主键，那么数据就无序的按行存放于磁盘中。如果为表设置一个主键，则数据从整齐排列的结构转化为树状结构，也就是B+Tree结构。因此一个表只能有一个聚集索引，因为它决定了这张表的物理存储顺序。</p><h2 id="非聚集索引"><a href="#非聚集索引" class="headerlink" title="非聚集索引"></a>非聚集索引</h2><p>非聚集索引同聚集索引一样的采用平衡树作为主要数据结构，如果为多个字段添加索引，则会出现多个相互独立的索引结构。</p><p><strong><em>通过非聚集索引，并不直接得到真实数据，而只是查到相应记录对应的主键值，最终再使用聚集索引检索到真实的数据</em></strong>，聚集索引是获取真实数据的唯一路径。</p><h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><blockquote><p>memory引擎不支持覆盖引擎</p></blockquote><p>对于以上所说的索引方式存在一种例外，是不需要再经过聚集索引，而直接可以获得数据一种索引方式，称之为<code>覆盖索引</code>，又或者是我们常说的<code>复合索引</code>或<code>多字段索引</code>。</p><p>覆盖索引直接将对应字段的值拷贝到索引当中。仅此，只需要检索索引，到达该索引的叶节点，即可获取到相应数据值。</p><p>例如下面这样的一个语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//建立索引</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> index_birthday <span class="keyword">on</span> user_info(birthday);</span><br><span class="line"></span><br><span class="line">//查询生日在1991年11月1日出生用户的用户名</span><br><span class="line"><span class="keyword">select</span> user_name <span class="keyword">from</span> user_info</span><br><span class="line"><span class="keyword">where</span> birthday = <span class="string">'1991-11-1'</span></span><br></pre></td></tr></table></figure></p><p>这里为<code>user_info</code>表的<code>birthday</code>字段建立了<code>index_birthday</code>索引。因此，在查询<code>birthday</code>字段时，<strong><em>会先通过非聚集索引，得到对应查询结果的主键ID，并通过主键ID再执行聚集索引，查询到真实数据</em></strong></p><p>而如果我们将这个索引，修改为复合索引(覆盖索引)，那么情形就会有所改变，下面来看。</p><h3 id="复合索引-多字段索引"><a href="#复合索引-多字段索引" class="headerlink" title="复合索引(多字段索引)"></a>复合索引(多字段索引)</h3><p>一个简单的创建复合索引的sql语句:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> index_birthday_and_user_name</span><br><span class="line"><span class="keyword">on</span> user_info(birthday, user_name);</span><br></pre></td></tr></table></figure></p><p>这时，再执行对应的查询操作时，非聚集索引的叶节点<strong><em>不仅包含了主键ID，还包含user_name的值</em></strong>，如果只是获取<code>user_name</code>的值(比如上面<code>select</code>语句)，就不需要再去执行聚集索引操作。</p><h3 id="INCLUDE索引"><a href="#INCLUDE索引" class="headerlink" title="INCLUDE索引"></a>INCLUDE索引</h3><p>在创建索引时，增加一个INCLUDE项，就可以做到在不增加索引键大小的情况下，仅使用一个非聚集索引就完成数据的检索。</p><p>比如我们将上面的创建索引语句修改为<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//建立索引</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> index_birthday <span class="keyword">on</span> user_info(birthday)</span><br><span class="line"><span class="keyword">INCLUDE</span> (user_name);</span><br></pre></td></tr></table></figure></p><p>这样的效果是，只能通过<code>birthday</code>进行索引，因此索引键的大小并没有变化，但索引的叶节点内却包含了<code>user_name</code>字段的值。</p><p>若将WHERE条件修改为<code>user_name</code>，则将不会通过<code>index_birthday</code>索引进行查询，而是采用聚集索引(全表查询)的方式进行搜索。</p><h2 id="使用B树的索引的检索方式"><a href="#使用B树的索引的检索方式" class="headerlink" title="使用B树的索引的检索方式"></a>使用B树的索引的检索方式</h2><p>对于普通索引或复合索引，采用了B+树形式存储键值，数据库是如何使用这些键值的？</p><h3 id="全值匹配"><a href="#全值匹配" class="headerlink" title="全值匹配"></a>全值匹配</h3><p>全值匹配也就是要求键值完全匹配的一种查询，比如这样的查询语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> order_name <span class="keyword">from</span> t_order <span class="keyword">where</span> order_id=<span class="string">'123456'</span></span><br></pre></td></tr></table></figure></p><h3 id="最左前缀匹配"><a href="#最左前缀匹配" class="headerlink" title="最左前缀匹配"></a>最左前缀匹配</h3><p>最左前缀匹配意味着当有两个以上索引时，将索引列的顺序逐个匹配关键字。</p><p>比如设置了两个联合索引<code>order_id</code>与<code>order_data</code>，那么以下的查询语句是可以使用索引的<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> order_name <span class="keyword">from</span> t_order <span class="keyword">where</span> order_id=<span class="string">'123456'</span></span><br></pre></td></tr></table></figure></p><p>即使顺序颠倒也依然成立<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> order_name <span class="keyword">from</span> t_order <span class="keyword">where</span> order_id=<span class="string">'123456'</span> <span class="keyword">AND</span> order_data=<span class="string">'CA00013'</span></span><br></pre></td></tr></table></figure></p><p>但查询条件中的列缺少前序索引列时，那么这个联合索引将不被使用。例如<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> order_name <span class="keyword">from</span> t_order <span class="keyword">where</span> order_data=<span class="string">'CA00013'</span></span><br></pre></td></tr></table></figure></p><p>最左匹配有两个重要原则</p><ol><li><code>=</code>和<code>in</code>可以乱序，mysql的查询优化器会自动将其优化为满足索引可识别的形式。</li><li>从左到右当遇到范围查询(<code>&gt;</code>,<code>&lt;</code>,<code>between</code>,<code>like</code>)时，最左前缀就会停止匹配。例如，建立索引(a,b,c,d)，查询语句 a=1 and b=2 and c&gt;3 and d=4，那么索引的有效列就只是a,b,c三个列，d不会被匹配进去。如果更换索引顺序为(a,b,d,c)那么这条语句的所有列都能应用索引。</li></ol><h3 id="列前缀匹配"><a href="#列前缀匹配" class="headerlink" title="列前缀匹配"></a>列前缀匹配</h3><p>匹配某一列的开头部分，例如<code>order_data=&#39;CA00%&#39;</code></p><h3 id="范围值匹配"><a href="#范围值匹配" class="headerlink" title="范围值匹配"></a>范围值匹配</h3><p>B树同样的适合于范围值的查找，例如<br><br><code>order_id &gt; &#39;123&#39; and order_id &lt; &#39;456&#39;</code></p><h3 id="精确匹配左前列，范围匹配另一列"><a href="#精确匹配左前列，范围匹配另一列" class="headerlink" title="精确匹配左前列，范围匹配另一列"></a>精确匹配左前列，范围匹配另一列</h3><p>在上面提到过，是最左匹配两个重要原则的第二个</p><p>例如 <code>a=1 and b=2 and c &gt; 3 and c&lt;6</code></p><h3 id="只访问索引的查询"><a href="#只访问索引的查询" class="headerlink" title="只访问索引的查询"></a>只访问索引的查询</h3><p>只需要访问非聚集索引而不需要访问聚集索引的查询(也就是覆盖索引)</p><h2 id="索引交叉"><a href="#索引交叉" class="headerlink" title="索引交叉"></a>索引交叉</h2><p>当一个查询语句中，用到多个索引时，数据库检索会做索引的交叉处理。</p><p>例如当一个查询的检索条件用到2个非聚集索引，而结果需要展示更多的字段时，数据库将这样处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">索引1-\</span><br><span class="line">       -&gt;哈希匹配最小子集-&gt;聚集索引-&gt;数据</span><br><span class="line">索引2-/</span><br></pre></td></tr></table></figure></p><p>如果这2个非聚集索引包含了所需要展示的所有字段(通过<code>INCLUDE</code>或复合索引等方式)，则数据库检索方式将变为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">索引1-\</span><br><span class="line">       -&gt;哈希匹配最小子集-&gt;数据</span><br><span class="line">索引2-/</span><br></pre></td></tr></table></figure></p><h2 id="BTree索引的限制"><a href="#BTree索引的限制" class="headerlink" title="BTree索引的限制"></a>BTree索引的限制</h2><p>与前文中最左前缀匹配中的给出的两条原则相似，这里给出一个总结。</p><ol><li>如果不是按照索引的最左列开始查询，则无法使用索引。(mysql会自动优化条件中的列顺序)</li><li>不可以跳过索引顺序左边的索引列</li><li><code>NOT IN</code>和<code>&lt;</code>、<code>&gt;</code>操作无法使用索引</li><li>查询中有某个列的范围查询，则右边的所有列都不使用索引。</li></ol><h2 id="哈希索引的限制"><a href="#哈希索引的限制" class="headerlink" title="哈希索引的限制"></a>哈希索引的限制</h2><p>前面哈希索引一节，提到了哈希索引只能满足<code>全值匹配</code>一种查询操作，我们来看看哈希索引存在哪些限制。</p><ol><li>哈希索引需要2次查询。哈希索引仅保存了哈希码、行指针等。需要先找到行，对行进行读取。</li><li>不可用于排序。由于哈希索引按哈希码排序，并不是按照键值顺序，因此是无法实现排序的。</li><li>仅支持全值匹配查找，不支持范围查找、模糊查找</li><li>存在哈希冲突。不适用于类似性别(男、女)这样的选择性差的列，因为计算出的哈希码基本相同。</li></ol><h1 id="MyISAM与InnoDB中的B-树"><a href="#MyISAM与InnoDB中的B-树" class="headerlink" title="MyISAM与InnoDB中的B+树"></a>MyISAM与InnoDB中的B+树</h1><blockquote><p><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">http://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p></blockquote><h2 id="MyISAM中的索引"><a href="#MyISAM中的索引" class="headerlink" title="MyISAM中的索引"></a>MyISAM中的索引</h2><p>对于MyISAM的主键索引而言，叶节点存放数据记录的实际地址，属于一种”非聚集”索引。</p><h2 id="InnoDB中的索引"><a href="#InnoDB中的索引" class="headerlink" title="InnoDB中的索引"></a>InnoDB中的索引</h2><p>InnoDB的索引则与MyISAM不同，有聚集索引的概念，这意味着，主键索引本身就是一个数据，叶节点直接存放真实数据。因为聚集索引与物理实际存放的顺序相同。因此，InnoDB表数据文件就是一颗B+树。</p><p>因此，<strong>InnoDB中要求表一定要有聚集索引</strong>，MyISAM不对此做要求。</p><p>对于Mysql的InnoDb引擎而言，<strong>主键默认成为聚集索引</strong>，如果不设主键，则非空的列成为聚集索引，否则生成隐藏列作为聚集索引，<strong>用户不能自己创建聚集索引，例如其他高级数据库中的<code>CREATE CLUSTERED INDEX</code>语句</strong></p><blockquote><p>InnoDB建议选择自增列作为主键，以便于聚集索引的建立，不建议使用UUID作为主键。</p></blockquote><blockquote><p>MyISAM按插入顺序在磁盘上存放数据，行尺寸固定，只需要跳过所需字节来定位目标行。</p></blockquote><h1 id="Mysql中的索引"><a href="#Mysql中的索引" class="headerlink" title="Mysql中的索引"></a>Mysql中的索引</h1><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p>一个简单的创建索引语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [NONCLUSTERED|CLUSTERED] <span class="keyword">INDEX</span> index_name </span><br><span class="line"><span class="keyword">ON</span> table_name(field_name)</span><br></pre></td></tr></table></figure></p><p>其中，如果未指定是否是聚集索引，则默认为<code>NONCLUSTERED</code></p><h2 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h2><h2 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h2><h1 id="索引的优化"><a href="#索引的优化" class="headerlink" title="索引的优化"></a>索引的优化</h1><blockquote><p>对于索引的优化，需要会用explain，明白extra字段的含义<br><br>using where: 使用索引但需要回表<br><br>using index: 覆盖索引<br><br>using index condition: 包含索引与未索引列时，先处理索引列，再回表查询。<br><br>using where; Using index: 不需要回表查询，查询所需的内容在索引中完成。</p></blockquote><h2 id="不可使用表达式或函数"><a href="#不可使用表达式或函数" class="headerlink" title="不可使用表达式或函数"></a>不可使用表达式或函数</h2><p>例如:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ... <span class="keyword">from</span> product</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line"><span class="keyword">to_days</span>(out_date) - <span class="keyword">to_days</span>(<span class="keyword">current_date</span>) &lt;=<span class="number">30</span></span><br></pre></td></tr></table></figure></p><p>其中<code>out_date</code>是索引列，对其使用函数将无法使用到索引。应该这样修改：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ... <span class="keyword">from</span> product</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">out_date &lt;= <span class="keyword">date_add</span>(<span class="keyword">current_date</span>, <span class="built_in">interval</span> <span class="number">30</span> <span class="keyword">day</span>)</span><br></pre></td></tr></table></figure></p><h2 id="对前缀建立索引或缩短键值"><a href="#对前缀建立索引或缩短键值" class="headerlink" title="对前缀建立索引或缩短键值"></a>对前缀建立索引或缩短键值</h2><p>缩短键值对索引查找所付出的I/O效率的提升是有一定效果的，并且Mysql中的索引，对键值大小有所限制<code>innodb</code>引擎中的键值大小不可以超过767字节，<code>MyISAM</code>不可以超过1000个字节。</p><p>对于常见的基本数据类型，一般不会超过这些限制，但如果超过，我们依然有方案可用，那就是对前缀建立索引:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> <span class="keyword">table</span>(col_name(n))</span><br></pre></td></tr></table></figure></p><p>mysql中可以这样去对某一列前n个字符的建立索引。</p><p>需要注意的是，对前缀建立索引，会降低索引列的选择性。</p><h2 id="使用联合索引并且选择好顺序"><a href="#使用联合索引并且选择好顺序" class="headerlink" title="使用联合索引并且选择好顺序"></a>使用联合索引并且选择好顺序</h2><p>如果对每一个列建立索引，显然不仅索引繁多，索引的开销以及查询结果多个索引的合并的开销，都是相当大的，选择联合索引也是一种比较好的解决方案。</p><p>但倘若建立联合索引，则需要更多注意建立索引时索引列顺序的选择</p><ol><li>经常被使用到的列顺序优先</li><li>选择性高的列优先(如果对应列是性别、状态这种重复性很强，选择性很低的列，一般没有必要建立索引)</li><li>宽度小的列优先(索引的键值越小，I/O效率越高)</li><li>所需字段不多时，可以使用覆盖索引(包含了一次查询所需要的所有字段的索引)。可以优化缓存，减少缓存换入换出，减少了磁盘I/O操作；减少随机I/O，变随机I/O为顺序I/O；避免InnoDB对聚集索引的查询。；避免MyISAM进行系统调用(MyISAM表数据依赖操作系统来缓存)</li></ol><h2 id="索引列中不要包含NULL值"><a href="#索引列中不要包含NULL值" class="headerlink" title="索引列中不要包含NULL值"></a>索引列中不要包含NULL值</h2><p>只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。</p><h2 id="数据库自带的一种覆盖索引"><a href="#数据库自带的一种覆盖索引" class="headerlink" title="数据库自带的一种覆盖索引"></a>数据库自带的一种覆盖索引</h2><p>在sakila数据库中对索引列<code>last_name</code>执行以下语句时<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> actor_id, last_name <span class="keyword">from</span> actor <span class="keyword">where</span> last_name=<span class="string">'1'</span>;</span><br></pre></td></tr></table></figure></p><p>可以看到Extra一栏写着<code>Using Index</code>，这是因为索引列<code>last_name</code>已经包含了该表的主键<code>actor_id</code>的值，也可以称之为是一种覆盖索引。</p><h2 id="使用索引优化排序"><a href="#使用索引优化排序" class="headerlink" title="使用索引优化排序"></a>使用索引优化排序</h2><p>需要的条件:</p><ol><li>索引的列顺序和order by子句的顺序完全一致</li><li>索引中所有列的升序或降序和order by顺序完全一致</li><li>order by中的字段全部在关联表中的第一张表中</li></ol><p>可在索引内完成的排序例如<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> rental_date <span class="keyword">from</span> rental <span class="keyword">where</span> rental_date = <span class="string">'2010-05-09'</span>  <span class="keyword">order</span> <span class="keyword">by</span> inventory_id;</span><br></pre></td></tr></table></figure></p><p>或<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> rental_date <span class="keyword">from</span> rental <span class="keyword">where</span> rental_date = <span class="string">'2010-05-09'</span>  <span class="keyword">order</span> <span class="keyword">by</span> inventory_id, customer_id;</span><br></pre></td></tr></table></figure></p><p>如果顺序不一致，则会出现using filesort，比如<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> rental_date <span class="keyword">from</span> rental <span class="keyword">where</span> rental_date = <span class="string">'2010-05-09'</span>  <span class="keyword">order</span> <span class="keyword">by</span> inventory_id <span class="keyword">desc</span>, customer_id;</span><br></pre></td></tr></table></figure></p><p>但一定要注意不能使用范围查询，否则范围符号右边出现的索引将失效<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> rental_date <span class="keyword">from</span> rental <span class="keyword">where</span> rental_date &gt; <span class="string">'2010-05-09'</span>  <span class="keyword">order</span> <span class="keyword">by</span> inventory_id;</span><br></pre></td></tr></table></figure></p><h2 id="模拟hash索引"><a href="#模拟hash索引" class="headerlink" title="模拟hash索引"></a>模拟hash索引</h2><p>通过额外一列，单独对行做hash并对该列建立索引来实现模拟hash的功能。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">table</span> <span class="keyword">set</span> column_hash = <span class="keyword">md5</span>(<span class="keyword">column</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_name <span class="keyword">on</span> <span class="keyword">table</span>(column_hash);</span><br></pre></td></tr></table></figure></p><p>hash索引需要注意的是</p><ol><li>只能处理键值全值匹配</li><li>hash函数决定索引键的大小</li><li>需要小心hash冲突</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">column</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> column_hash = <span class="keyword">md5</span>(<span class="string">"xxxx"</span>) <span class="keyword">and</span> <span class="keyword">column</span>=<span class="string">"xxx"</span>;</span><br></pre></td></tr></table></figure><p>之所以还需要使用<code>and column=&quot;xxx&quot;</code>是为了避免hash冲突的出现，这使得整个查询在哈希索引的作用下，再对结果进行一次冲突避免。</p><h2 id="使用索引优化锁"><a href="#使用索引优化锁" class="headerlink" title="使用索引优化锁"></a>使用索引优化锁</h2><ol><li>使用索引可以减少处理行，减少了加锁的行数</li><li>使用索引可以减少处理行并在内存中处理，因此加快处理速度，加快锁是释放。</li></ol><p>两个事务并发的对查询加排它锁时，如果查询的对应字段加了索引，排他锁是行级的，如果没有索引，那么排他锁将锁住整个表，使得第二个查询无法执行。</p><h2 id="删除重复和冗余的索引"><a href="#删除重复和冗余的索引" class="headerlink" title="删除重复和冗余的索引"></a>删除重复和冗余的索引</h2><blockquote><p>unique key(id) 并不只是约束，同时也会建立唯一索引。</p></blockquote><ol><li><p>重复索引<br><br>例如，对某一字段这样定义<code>primary key(id), unique key(id), index(id)</code>，那么这里就出现了三个索引，主键索引、唯一索引、单列索引，是重复的，对维护的开销比较大。</p></li><li><p>冗余索引<br><br> 1) 例如，<code>index(a), index(a,b)</code>属于冗余索引，对b树机制缺乏了解，其实<code>index(a)</code>包含在<code>index(a,b)</code>这一联合索引中，因此没有必要建立<code>index(a)</code>索引<br><br> 2) 如果建立这样的索引<code>primary key(id), index(a,id)</code>，意味着使用者缺乏对innodb存储引擎建立索引的了解，每一个二级索引，会自动的拷贝主键索引信息的。</p></li></ol><p>使用<code>pt-duplicate-key-checker h=127.0.0.1</code>命令可以检查冗余和重复的索引</p><h2 id="更新索引统计信息及减少索引碎片"><a href="#更新索引统计信息及减少索引碎片" class="headerlink" title="更新索引统计信息及减少索引碎片"></a>更新索引统计信息及减少索引碎片</h2><p>需要定期的维护索引的碎片<br><br><code>analyze table table_name</code><br><br><code>optimize table table_name</code>(会锁表，需要注意使用时间)</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ol><li>为表上的所有字段建立索引，这种做法是否可行？<br><br> 1) 不可行，插入、更新等操作所需要的维护索引的开销会变得很大。因此对于经常需要更新和插入的表格就没有必要为不常用的where语句去建立索引、对于较小的表也可以不用建立索引。(注: innodb引入了插入缓存，使得多次插入不会引起多次的索引维护)<br> 2) 太多索引也会影响查询时间，会增加查询优化器对查询语句分析的时间。</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/kissdodog/p/3158701.html" target="_blank" rel="noopener">https://www.cnblogs.com/kissdodog/p/3158701.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;什么是索引&quot;&gt;&lt;a href=&quot;#什么是索引&quot; class=&quot;headerlink&quot; title=&quot;什么是索引&quot;&gt;&lt;/a&gt;什么是索引&lt;/h1&gt;&lt;p&gt;索引是为了提高数据检索速度而提前建立的相关数据结构。&lt;/p&gt;
&lt;h1 id=&quot;为什么要使用
      
    
    </summary>
    
      <category term="dbms" scheme="https://jobscn.github.io/categories/dbms/"/>
    
    
      <category term="数据库" scheme="https://jobscn.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="mysql" scheme="https://jobscn.github.io/tags/mysql/"/>
    
      <category term="数据结构" scheme="https://jobscn.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>【C++】【STL】迭代器(iterator)篇之traits技术详解</title>
    <link href="https://jobscn.github.io/cpp/stl/iterator/stl-iterator-traits.html"/>
    <id>https://jobscn.github.io/cpp/stl/iterator/stl-iterator-traits.html</id>
    <published>2019-01-11T14:51:23.000Z</published>
    <updated>2019-03-05T14:12:19.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是iterator-traits"><a href="#什么是iterator-traits" class="headerlink" title="什么是iterator_traits"></a>什么是iterator_traits</h1><p>iterator_traits是一种模板返回类型推导的技巧，主要是通过一层返回类型的封装，使得返回类型更加灵活。</p><p>在不使用iterator_traits技术时，迭代器的返回类型可以使用内嵌类型声明的方式实现，比如下面这种方式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iterator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> T value_type; <span class="comment">// 内嵌类型声明</span></span><br><span class="line">    </span><br><span class="line">    Iterator(T* value):m_ptr(value)&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> *m_ptr;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* m_ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Iterator&gt;</span><br><span class="line"><span class="keyword">typename</span> Iterator::value_type <span class="comment">// 使用内嵌类型声明为函数设定返回值类型</span></span><br><span class="line">func(Iterator iter)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> *iter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Iterator&lt;<span class="keyword">int</span>&gt; iter(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;func(iter)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据定义，原生指针本身也是一种迭代器，而这种写法无法满足这一条件，这时，iterator_traits便能大显身手。</p><p>定义一个Iterator_traits用作类型萃取<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Iterator&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Iterator_traits</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> Iterator::value_type value_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>将刚才的func修改为<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Iterator&gt;</span><br><span class="line"><span class="keyword">typename</span> Iterator_traits&lt;Iterator&gt;::value_type</span><br><span class="line">func(Iterator iter)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> *iter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这一行为，看起来使得func函数更加冗余，但他可以轻松得另func函数支持原生指针，那就是令traits模板偏特化！</p><p>增加两个traits偏特化版本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Iterator_traits</span>&lt;T*&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T value_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Iterator_traits</span>&lt;const T*&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T value_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>修改main函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">int</span>* p = &amp;a;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;func(p)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序通过编译，并成功输出123。</p><p>同样的，最常用到的迭代器相应型别有五种，定义traits时，同样定义这五种类型。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::iterator_category iterator_category;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::value_type value_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::difference_type difference_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::pointer pointer;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::reference reference;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="1-value-type"><a href="#1-value-type" class="headerlink" title="1. value_type"></a>1. value_type</h2><p>表示迭代器所指对象类型</p><h2 id="2-difference-type"><a href="#2-difference-type" class="headerlink" title="2. difference_type"></a>2. difference_type</h2><p>通常用来表示两个迭代器间的距离，因此也可以表示一个容器的最大容量，如果一个范型算法提供计数功能，如STL提供count函数，其传回值就必须使用difference_type</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">typename</span> <span class="title">iterator_traits</span>&lt;T&gt;:</span>:different_type</span><br><span class="line">count(I first, I last, <span class="keyword">const</span> T&amp; value)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typename</span> iterator_traits&lt;I&gt;::different_type n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; first != last; ++first)</span><br><span class="line">        <span class="keyword">if</span>( *first == value)</span><br><span class="line">            ++n;</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对原生指针来说，通常在偏特化时使用ptrdiff_t(定义于<cstddef>之中)。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::difference_type difference_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 针对原生指针设计的偏特化</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&lt;T*&gt;&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 针对原生的pointer-to-const设计的偏特化版</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&lt;const T*&gt;&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></cstddef></p><p>因此，任何时候当我们需要迭代器的difference_type时，可以这样写<br><code>typename iterator_traits&lt;I&gt;::difference_type</code></p><h2 id="3-reference-type于pointer-type"><a href="#3-reference-type于pointer-type" class="headerlink" title="3 reference_type于pointer_type"></a>3 reference_type于pointer_type</h2><p>reference_type表示迭代器所指之物的引用，pointer_type表示迭代器所指之物的指针。迭代器分为两种：mutable_iterators、constant_iterators。<br>一种属于左值，另一种属于右值。</p><p>通常c++要传回左值，都是以by reference的方式进行，所以当一个mutable iterators的value_type是T时，*p应当是T&amp;。而constant iterators的*p不应该是const T，而是const T&amp;。</p><p><strong><em>这里所讨论的\</em>p即reference_type*</strong></p><p>同样的，p-&gt;则能获取到迭代器所指之物的地址。</p><p>现在我们来看看对应的traits<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::reference reference;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> I::pointer pointer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&lt;I*&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> I&amp; reference;</span><br><span class="line">    <span class="keyword">typedef</span> I* pointer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">I</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">iterator_traits</span>&lt;const I*&gt;</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">const</span> I&amp; reference;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">const</span> I* pointer;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="什么是type-traits"><a href="#什么是type-traits" class="headerlink" title="什么是type_traits"></a>什么是type_traits</h1><p>在SGI STL中，定义了type_traits及一系列拓展，与iterator_traits类似，皆旨在编译期令程序代码知道一些类的特性。</p><p>见STL源码剖析3.7(p103)</p><p>macOS部分type_traits内容摘抄</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt; <span class="title">struct</span> _<span class="title">LIBCPP_TEMPLATE_VIS</span> <span class="title">is_lvalue_reference</span>       :</span> <span class="keyword">public</span> false_type &#123;&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt; <span class="title">struct</span> _<span class="title">LIBCPP_TEMPLATE_VIS</span> <span class="title">is_lvalue_reference</span>&lt;_Tp&amp;&gt; :</span> <span class="keyword">public</span> true_type &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt; <span class="title">struct</span> _<span class="title">LIBCPP_TEMPLATE_VIS</span> <span class="title">is_rvalue_reference</span>        :</span> <span class="keyword">public</span> false_type &#123;&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _LIBCPP_HAS_NO_RVALUE_REFERENCES</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt; <span class="title">struct</span> _<span class="title">LIBCPP_TEMPLATE_VIS</span> <span class="title">is_rvalue_reference</span>&lt;_Tp&amp;&amp;&gt; :</span> <span class="keyword">public</span> true_type &#123;&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt; <span class="title">struct</span> _<span class="title">LIBCPP_TEMPLATE_VIS</span> <span class="title">is_reference</span>        :</span> <span class="keyword">public</span> false_type &#123;&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt; <span class="title">struct</span> _<span class="title">LIBCPP_TEMPLATE_VIS</span> <span class="title">is_reference</span>&lt;_Tp&amp;&gt;  :</span> <span class="keyword">public</span> true_type &#123;&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _LIBCPP_HAS_NO_RVALUE_REFERENCES</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt; <span class="title">struct</span> _<span class="title">LIBCPP_TEMPLATE_VIS</span> <span class="title">is_reference</span>&lt;_Tp&amp;&amp;&gt; :</span> <span class="keyword">public</span> true_type &#123;&#125;;</span><br></pre></td></tr></table></figure><p>is_same的设计相当巧妙，摘抄源码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// is_same</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>, <span class="title">class</span> _<span class="title">Up</span>&gt; <span class="title">struct</span> _<span class="title">LIBCPP_TEMPLATE_VIS</span> <span class="title">is_same</span>           :</span> <span class="keyword">public</span> false_type &#123;&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;            <span class="title">struct</span> _<span class="title">LIBCPP_TEMPLATE_VIS</span> <span class="title">is_same</span>&lt;_Tp, _Tp&gt; :</span> <span class="keyword">public</span> true_type &#123;&#125;;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>iterator_traits参考：<br><a href="https://blog.csdn.net/shudou/article/details/10270971" target="_blank" rel="noopener">https://blog.csdn.net/shudou/article/details/10270971</a></p><p>STL源码剖析(侯捷译):85页</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是iterator-traits&quot;&gt;&lt;a href=&quot;#什么是iterator-traits&quot; class=&quot;headerlink&quot; title=&quot;什么是iterator_traits&quot;&gt;&lt;/a&gt;什么是iterator_traits&lt;/h1&gt;&lt;p&gt;iterat
      
    
    </summary>
    
      <category term="cpp" scheme="https://jobscn.github.io/categories/cpp/"/>
    
      <category term="stl" scheme="https://jobscn.github.io/categories/cpp/stl/"/>
    
      <category term="iterator" scheme="https://jobscn.github.io/categories/cpp/stl/iterator/"/>
    
    
      <category term="cpp" scheme="https://jobscn.github.io/tags/cpp/"/>
    
      <category term="stl" scheme="https://jobscn.github.io/tags/stl/"/>
    
      <category term="iterator" scheme="https://jobscn.github.io/tags/iterator/"/>
    
      <category term="traits" scheme="https://jobscn.github.io/tags/traits/"/>
    
  </entry>
  
</feed>
